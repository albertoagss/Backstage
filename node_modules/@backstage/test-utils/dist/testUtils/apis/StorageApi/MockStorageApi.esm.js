import ObservableImpl from 'zen-observable';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class MockStorageApi {
  constructor(namespace, bucketStorageApis, data) {
    __publicField(this, "namespace");
    __publicField(this, "data");
    __publicField(this, "bucketStorageApis");
    __publicField(this, "subscribers", /* @__PURE__ */ new Set());
    __publicField(this, "observable", new ObservableImpl((subscriber) => {
      this.subscribers.add(subscriber);
      return () => {
        this.subscribers.delete(subscriber);
      };
    }));
    this.namespace = namespace;
    this.bucketStorageApis = bucketStorageApis;
    this.data = { ...data };
  }
  static create(data) {
    return new MockStorageApi("", /* @__PURE__ */ new Map(), data);
  }
  forBucket(name) {
    if (!this.bucketStorageApis.has(name)) {
      this.bucketStorageApis.set(
        name,
        new MockStorageApi(
          `${this.namespace}/${name}`,
          this.bucketStorageApis,
          this.data
        )
      );
    }
    return this.bucketStorageApis.get(name);
  }
  snapshot(key) {
    if (this.data.hasOwnProperty(this.getKeyName(key))) {
      const data = this.data[this.getKeyName(key)];
      return {
        key,
        presence: "present",
        value: data
      };
    }
    return {
      key,
      presence: "absent",
      value: void 0
    };
  }
  async set(key, data) {
    const serialized = JSON.parse(JSON.stringify(data), (_key, value) => {
      if (typeof value === "object" && value !== null) {
        Object.freeze(value);
      }
      return value;
    });
    this.data[this.getKeyName(key)] = serialized;
    this.notifyChanges({
      key,
      presence: "present",
      value: serialized
    });
  }
  async remove(key) {
    delete this.data[this.getKeyName(key)];
    this.notifyChanges({
      key,
      presence: "absent",
      value: void 0
    });
  }
  observe$(key) {
    return this.observable.filter(({ key: messageKey }) => messageKey === key);
  }
  getKeyName(key) {
    return `${this.namespace}/${encodeURIComponent(key)}`;
  }
  notifyChanges(message) {
    for (const subscription of this.subscribers) {
      subscription.next(message);
    }
  }
}

export { MockStorageApi };
//# sourceMappingURL=MockStorageApi.esm.js.map
