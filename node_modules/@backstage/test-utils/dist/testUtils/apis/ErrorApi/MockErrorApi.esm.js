var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const nullObservable = {
  subscribe: () => ({ unsubscribe: () => {
  }, closed: true }),
  [Symbol.observable]() {
    return this;
  }
};
class MockErrorApi {
  constructor(options = {}) {
    this.options = options;
    __publicField(this, "errors", new Array());
    __publicField(this, "waiters", /* @__PURE__ */ new Set());
  }
  post(error, context) {
    if (this.options.collect) {
      this.errors.push({ error, context });
      for (const waiter of this.waiters) {
        if (waiter.pattern.test(error.message)) {
          this.waiters.delete(waiter);
          waiter.resolve({ error, context });
        }
      }
      return;
    }
    throw new Error(`MockErrorApi received unexpected error, ${error}`);
  }
  error$() {
    return nullObservable;
  }
  getErrors() {
    return this.errors;
  }
  waitForError(pattern, timeoutMs = 2e3) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        reject(new Error("Timed out waiting for error"));
      }, timeoutMs);
      this.waiters.add({ resolve, pattern });
    });
  }
}

export { MockErrorApi };
//# sourceMappingURL=MockErrorApi.esm.js.map
