import React from 'react';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import Input from '@material-ui/core/Input';
import InputLabel from '@material-ui/core/InputLabel';
import { Select } from '@backstage/core-components';

const AzureRepoPicker = (props) => {
  const {
    allowedOrganizations = [],
    allowedOwners = [],
    rawErrors,
    state,
    onChange
  } = props;
  const organizationItems = allowedOrganizations ? allowedOrganizations.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  const ownerItems = allowedOwners ? allowedOwners.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  const { organization, owner } = state;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: (rawErrors == null ? void 0 : rawErrors.length) > 0 && !organization
    },
    (allowedOrganizations == null ? void 0 : allowedOrganizations.length) ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: "Organization",
        onChange: (s) => onChange({ organization: String(Array.isArray(s) ? s[0] : s) }),
        disabled: allowedOrganizations.length === 1,
        selected: organization,
        items: organizationItems
      }
    ) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(InputLabel, { htmlFor: "orgInput" }, "Organization"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "orgInput",
        onChange: (e) => onChange({ organization: e.target.value }),
        value: organization
      }
    )),
    /* @__PURE__ */ React.createElement(FormHelperText, null, "The Organization that this repo will belong to")
  ), /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: (rawErrors == null ? void 0 : rawErrors.length) > 0 && !owner
    },
    (allowedOwners == null ? void 0 : allowedOwners.length) ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: "Owner",
        onChange: (s) => onChange({ owner: String(Array.isArray(s) ? s[0] : s) }),
        disabled: allowedOwners.length === 1,
        selected: owner,
        items: ownerItems
      }
    ) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(InputLabel, { htmlFor: "ownerInput" }, "Project"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "ownerInput",
        onChange: (e) => onChange({ owner: e.target.value }),
        value: owner
      }
    )),
    /* @__PURE__ */ React.createElement(FormHelperText, null, "The Project that this repo will belong to")
  ));
};

export { AzureRepoPicker };
//# sourceMappingURL=AzureRepoPicker.esm.js.map
