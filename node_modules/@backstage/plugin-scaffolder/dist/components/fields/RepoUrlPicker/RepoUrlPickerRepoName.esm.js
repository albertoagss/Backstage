import React, { useEffect } from 'react';
import { Select } from '@backstage/core-components';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import Input from '@material-ui/core/Input';
import InputLabel from '@material-ui/core/InputLabel';

const RepoUrlPickerRepoName = (props) => {
  const { repoName, allowedRepos, onChange, rawErrors } = props;
  useEffect(() => {
    if (!repoName) {
      if (allowedRepos == null ? void 0 : allowedRepos.length) {
        onChange(allowedRepos[0]);
      }
    }
  }, [allowedRepos, repoName, onChange]);
  const repoItems = allowedRepos ? allowedRepos.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: (rawErrors == null ? void 0 : rawErrors.length) > 0 && !repoName
    },
    (allowedRepos == null ? void 0 : allowedRepos.length) ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: "Repositories Available",
        onChange: (selected) => onChange(String(Array.isArray(selected) ? selected[0] : selected)),
        disabled: allowedRepos.length === 1,
        selected: repoName,
        items: repoItems
      }
    ) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(InputLabel, { htmlFor: "repoNameInput" }, "Repository"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "repoNameInput",
        onChange: (e) => onChange(String(e.target.value)),
        value: repoName
      }
    )),
    /* @__PURE__ */ React.createElement(FormHelperText, null, "The name of the repository")
  ));
};

export { RepoUrlPickerRepoName };
//# sourceMappingURL=RepoUrlPickerRepoName.esm.js.map
