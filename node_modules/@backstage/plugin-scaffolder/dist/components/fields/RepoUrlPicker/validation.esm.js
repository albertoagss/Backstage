import { scmIntegrationsApiRef } from '@backstage/integration-react';

const repoPickerValidation = (value, validation, context) => {
  var _a, _b;
  try {
    const { host, searchParams } = new URL(`https://${value}`);
    const integrationApi = context.apiHolder.get(scmIntegrationsApiRef);
    if (!host) {
      validation.addError(
        "Incomplete repository location provided, host not provided"
      );
    } else {
      if (((_a = integrationApi == null ? void 0 : integrationApi.byHost(host)) == null ? void 0 : _a.type) === "bitbucket") {
        if (host === "bitbucket.org" && !searchParams.get("workspace")) {
          validation.addError(
            "Incomplete repository location provided, workspace not provided"
          );
        }
        if (!searchParams.get("project")) {
          validation.addError(
            "Incomplete repository location provided, project not provided"
          );
        }
      } else if (((_b = integrationApi == null ? void 0 : integrationApi.byHost(host)) == null ? void 0 : _b.type) !== "gerrit") {
        if (!searchParams.get("owner")) {
          validation.addError(
            "Incomplete repository location provided, owner not provided"
          );
        }
      }
      if (!searchParams.get("repo")) {
        validation.addError(
          "Incomplete repository location provided, repo not provided"
        );
      }
    }
  } catch {
    validation.addError("Unable to parse the Repository URL");
  }
};

export { repoPickerValidation };
//# sourceMappingURL=validation.esm.js.map
