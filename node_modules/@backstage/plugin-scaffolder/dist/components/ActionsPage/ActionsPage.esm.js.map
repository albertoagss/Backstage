{"version":3,"file":"ActionsPage.esm.js","sources":["../../../src/components/ActionsPage/ActionsPage.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { Fragment, useState } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport {\n  ActionExample,\n  scaffolderApiRef,\n} from '@backstage/plugin-scaffolder-react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { JSONSchema7, JSONSchema7Definition } from 'json-schema';\nimport classNames from 'classnames';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\nimport { useApi, useRouteRef } from '@backstage/core-plugin-api';\nimport {\n  CodeSnippet,\n  Content,\n  ErrorPage,\n  Header,\n  MarkdownContent,\n  Page,\n  Progress,\n} from '@backstage/core-components';\nimport Chip from '@material-ui/core/Chip';\nimport { ScaffolderPageContextMenu } from '@backstage/plugin-scaffolder-react/alpha';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  editRouteRef,\n  rootRouteRef,\n  scaffolderListTaskRouteRef,\n} from '../../routes';\n\nconst useStyles = makeStyles(theme => ({\n  code: {\n    fontFamily: 'Menlo, monospace',\n    padding: theme.spacing(1),\n    backgroundColor:\n      theme.palette.type === 'dark'\n        ? theme.palette.grey[700]\n        : theme.palette.grey[300],\n    display: 'inline-block',\n    borderRadius: 5,\n    border: `1px solid ${theme.palette.grey[500]}`,\n    position: 'relative',\n  },\n\n  codeRequired: {\n    '&::after': {\n      position: 'absolute',\n      content: '\"*\"',\n      top: 0,\n      right: theme.spacing(0.5),\n      fontWeight: 'bolder',\n      color: theme.palette.error.light,\n    },\n  },\n}));\n\nconst ExamplesTable = (props: { examples: ActionExample[] }) => {\n  return (\n    <Grid container>\n      {props.examples.map((example, index) => {\n        return (\n          <Fragment key={`example-${index}`}>\n            <Grid item lg={3}>\n              <Box padding={4}>\n                <Typography>{example.description}</Typography>\n              </Box>\n            </Grid>\n            <Grid item lg={9}>\n              <Box padding={1}>\n                <CodeSnippet\n                  text={example.example}\n                  showLineNumbers\n                  showCopyCodeButton\n                  language=\"yaml\"\n                />\n              </Box>\n            </Grid>\n          </Fragment>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport const ActionsPage = () => {\n  const api = useApi(scaffolderApiRef);\n  const navigate = useNavigate();\n  const editorLink = useRouteRef(editRouteRef);\n  const tasksLink = useRouteRef(scaffolderListTaskRouteRef);\n  const createLink = useRouteRef(rootRouteRef);\n\n  const scaffolderPageContextMenuProps = {\n    onEditorClicked: () => navigate(editorLink()),\n    onActionsClicked: undefined,\n    onTasksClicked: () => navigate(tasksLink()),\n    onCreateClicked: () => navigate(createLink()),\n  };\n  const classes = useStyles();\n  const { loading, value, error } = useAsync(async () => {\n    return api.listActions();\n  });\n  const [isExpanded, setIsExpanded] = useState<{ [key: string]: boolean }>({});\n\n  if (loading) {\n    return <Progress />;\n  }\n\n  if (error) {\n    return (\n      <ErrorPage\n        statusMessage=\"Failed to load installed actions\"\n        status=\"500\"\n        stack={error.stack}\n      />\n    );\n  }\n\n  const renderTable = (rows?: JSX.Element[]) => {\n    if (!rows || rows.length < 1) {\n      return <Typography>No schema defined</Typography>;\n    }\n    return (\n      <TableContainer component={Paper}>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell>Description</TableCell>\n              <TableCell>Type</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{rows}</TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const getTypes = (properties: JSONSchema7) => {\n    if (!properties.type) {\n      return ['unknown'];\n    }\n\n    if (properties.type !== 'array') {\n      return [properties.type].flat();\n    }\n\n    return [\n      `${properties.type}(${\n        (properties.items as JSONSchema7 | undefined)?.type ?? 'unknown'\n      })`,\n    ];\n  };\n\n  const formatRows = (parentId: string, input?: JSONSchema7) => {\n    const properties = input?.properties;\n    if (!properties) {\n      return undefined;\n    }\n\n    return Object.entries(properties).map(entry => {\n      const [key] = entry;\n      const id = `${parentId}.${key}`;\n      const props = entry[1] as unknown as JSONSchema7;\n      const codeClassname = classNames(classes.code, {\n        [classes.codeRequired]: input.required?.includes(key),\n      });\n      const types = getTypes(props);\n\n      return (\n        <React.Fragment key={id}>\n          <TableRow key={id}>\n            <TableCell>\n              <div className={codeClassname}>{key}</div>\n            </TableCell>\n            <TableCell>{props.title}</TableCell>\n            <TableCell>{props.description}</TableCell>\n            <TableCell>\n              {types.map(type =>\n                type.includes('object') ? (\n                  <Chip\n                    label={type}\n                    key={type}\n                    icon={\n                      isExpanded[id] ? <ExpandLessIcon /> : <ExpandMoreIcon />\n                    }\n                    variant=\"outlined\"\n                    onClick={() =>\n                      setIsExpanded(prevState => {\n                        const state = { ...prevState };\n                        state[id] = !prevState[id];\n                        return state;\n                      })\n                    }\n                  />\n                ) : (\n                  <Chip label={type} key={type} variant=\"outlined\" />\n                ),\n              )}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n              <Collapse in={isExpanded[id]} timeout=\"auto\" unmountOnExit>\n                <Box sx={{ margin: 1 }}>\n                  <Typography variant=\"h6\" component=\"div\">\n                    {key}\n                  </Typography>\n                  {renderTable(\n                    formatRows(\n                      id,\n                      props.type === 'array'\n                        ? ({\n                            properties:\n                              (props.items as JSONSchema7 | undefined)\n                                ?.properties ?? {},\n                          } as unknown as JSONSchema7 | undefined)\n                        : props,\n                    ),\n                  )}\n                </Box>\n              </Collapse>\n            </TableCell>\n          </TableRow>\n        </React.Fragment>\n      );\n    });\n  };\n\n  const renderTables = (\n    name: string,\n    id: string,\n    input?: JSONSchema7Definition[],\n  ) => {\n    if (!input) {\n      return undefined;\n    }\n\n    return (\n      <>\n        <Typography variant=\"h6\" component=\"h4\">\n          {name}\n        </Typography>\n        {input.map((i, index) => (\n          <div key={index}>\n            {renderTable(\n              formatRows(`${id}.${index}`, i as unknown as JSONSchema7),\n            )}\n          </div>\n        ))}\n      </>\n    );\n  };\n\n  const items = value?.map(action => {\n    if (action.id.startsWith('legacy:')) {\n      return undefined;\n    }\n\n    const oneOf = renderTables(\n      'oneOf',\n      `${action.id}.input`,\n      action.schema?.input?.oneOf,\n    );\n    return (\n      <Box pb={4} key={action.id}>\n        <Typography variant=\"h4\" component=\"h2\" className={classes.code}>\n          {action.id}\n        </Typography>\n        {action.description && <MarkdownContent content={action.description} />}\n        {action.schema?.input && (\n          <Box pb={2}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Input\n            </Typography>\n            {renderTable(\n              formatRows(`${action.id}.input`, action?.schema?.input),\n            )}\n            {oneOf}\n          </Box>\n        )}\n        {action.schema?.output && (\n          <Box pb={2}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Output\n            </Typography>\n            {renderTable(\n              formatRows(`${action.id}.output`, action?.schema?.output),\n            )}\n          </Box>\n        )}\n        {action.examples && (\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"h5\" component=\"h3\">\n                Examples\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box pb={2}>\n                <ExamplesTable examples={action.examples} />\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n        )}\n      </Box>\n    );\n  });\n\n  return (\n    <Page themeId=\"home\">\n      <Header\n        pageTitleOverride=\"Create a New Component\"\n        title=\"Installed actions\"\n        subtitle=\"This is the collection of all installed actions\"\n      >\n        <ScaffolderPageContextMenu {...scaffolderPageContextMenuProps} />\n      </Header>\n      <Content>{items}</Content>\n    </Page>\n  );\n};\n"],"names":[],"mappings":"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"}