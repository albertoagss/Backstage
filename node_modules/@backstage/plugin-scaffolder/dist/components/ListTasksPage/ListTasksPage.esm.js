import { Page, Header, Content, Progress, ErrorPanel, EmptyState, Table, Link } from '@backstage/core-components';
import { useRouteRef, useApi } from '@backstage/core-plugin-api';
import { CatalogFilterLayout } from '@backstage/plugin-catalog-react';
import useAsync from 'react-use/esm/useAsync';
import React, { useState } from 'react';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import { OwnerListPicker } from './OwnerListPicker.esm.js';
import { CreatedAtColumn } from './columns/CreatedAtColumn.esm.js';
import { OwnerEntityColumn } from './columns/OwnerEntityColumn.esm.js';
import { TaskStatusColumn } from './columns/TaskStatusColumn.esm.js';
import { TemplateTitleColumn } from './columns/TemplateTitleColumn.esm.js';
import { editRouteRef, actionsRouteRef, rootRouteRef } from '../../routes.esm.js';
import { ScaffolderPageContextMenu } from '@backstage/plugin-scaffolder-react/alpha';
import { useNavigate } from 'react-router-dom';

const ListTaskPageContent = (props) => {
  var _a;
  const { initiallySelectedFilter = "owned" } = props;
  const scaffolderApi = useApi(scaffolderApiRef);
  const rootLink = useRouteRef(rootRouteRef);
  const [ownerFilter, setOwnerFilter] = useState(initiallySelectedFilter);
  const { value, loading, error } = useAsync(() => {
    var _a2;
    if (scaffolderApi.listTasks) {
      return (_a2 = scaffolderApi.listTasks) == null ? void 0 : _a2.call(scaffolderApi, { filterByOwnership: ownerFilter });
    }
    console.warn(
      "listTasks is not implemented in the scaffolderApi, please make sure to implement this method."
    );
    return Promise.resolve({ tasks: [] });
  }, [scaffolderApi, ownerFilter]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ErrorPanel, { error }), /* @__PURE__ */ React.createElement(
      EmptyState,
      {
        missing: "info",
        title: "No information to display",
        description: "There is no Tasks or there was an issue communicating with backend."
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(CatalogFilterLayout, null, /* @__PURE__ */ React.createElement(CatalogFilterLayout.Filters, null, /* @__PURE__ */ React.createElement(
    OwnerListPicker,
    {
      filter: ownerFilter,
      onSelectOwner: (id) => setOwnerFilter(id)
    }
  )), /* @__PURE__ */ React.createElement(CatalogFilterLayout.Content, null, /* @__PURE__ */ React.createElement(
    Table,
    {
      data: (_a = value == null ? void 0 : value.tasks) != null ? _a : [],
      title: "Tasks",
      columns: [
        {
          title: "Task ID",
          field: "id",
          render: (row) => /* @__PURE__ */ React.createElement(Link, { to: `${rootLink()}/tasks/${row.id}` }, row.id)
        },
        {
          title: "Template",
          field: "spec.templateInfo.entity.metadata.title",
          render: (row) => {
            var _a2;
            return /* @__PURE__ */ React.createElement(
              TemplateTitleColumn,
              {
                entityRef: (_a2 = row.spec.templateInfo) == null ? void 0 : _a2.entityRef
              }
            );
          }
        },
        {
          title: "Created",
          field: "createdAt",
          render: (row) => /* @__PURE__ */ React.createElement(CreatedAtColumn, { createdAt: row.createdAt })
        },
        {
          title: "Owner",
          field: "createdBy",
          render: (row) => {
            var _a2, _b;
            return /* @__PURE__ */ React.createElement(OwnerEntityColumn, { entityRef: (_b = (_a2 = row.spec) == null ? void 0 : _a2.user) == null ? void 0 : _b.ref });
          }
        },
        {
          title: "Status",
          field: "status",
          render: (row) => /* @__PURE__ */ React.createElement(TaskStatusColumn, { status: row.status })
        }
      ]
    }
  )));
};
const ListTasksPage = (props) => {
  const navigate = useNavigate();
  const editorLink = useRouteRef(editRouteRef);
  const actionsLink = useRouteRef(actionsRouteRef);
  const createLink = useRouteRef(rootRouteRef);
  const scaffolderPageContextMenuProps = {
    onEditorClicked: () => navigate(editorLink()),
    onActionsClicked: () => navigate(actionsLink()),
    onTasksClicked: void 0,
    onCreateClicked: () => navigate(createLink())
  };
  return /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      pageTitleOverride: "Templates Tasks",
      title: "List template tasks",
      subtitle: "All tasks that have been started"
    },
    /* @__PURE__ */ React.createElement(ScaffolderPageContextMenu, { ...scaffolderPageContextMenuProps })
  ), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(ListTaskPageContent, { ...props })));
};

export { ListTasksPage };
//# sourceMappingURL=ListTasksPage.esm.js.map
