import { useAnalytics, useApiHolder } from '@backstage/core-plugin-api';
import MuiStepper from '@material-ui/core/Stepper';
import MuiStep from '@material-ui/core/Step';
import MuiStepLabel from '@material-ui/core/StepLabel';
import Button from '@material-ui/core/Button';
import LinearProgress from '@material-ui/core/LinearProgress';
import { makeStyles } from '@material-ui/core/styles';
import React, { useState, useMemo, useCallback } from 'react';
import { createAsyncValidators } from './createAsyncValidators.esm.js';
import { ReviewState } from '../ReviewState/ReviewState.esm.js';
import { useFormDataFromQuery } from '../../hooks/useFormDataFromQuery.esm.js';
import { useTemplateSchema } from '../../hooks/useTemplateSchema.esm.js';
import 'react-use/esm/useAsync';
import '../../../api/ref.esm.js';
import 'lodash/cloneDeep';
import validator from '@rjsf/validator-ajv8';
import { useTransformSchemaToProps } from '../../hooks/useTransformSchemaToProps.esm.js';
import { hasErrors } from './utils.esm.js';
import * as index from './FieldOverrides/index.esm.js';
import { Form } from '../Form/Form.esm.js';
import { ErrorListTemplate } from './ErrorListTemplate/errorListTemplate.esm.js';

const useStyles = makeStyles((theme) => ({
  backButton: {
    marginRight: theme.spacing(1)
  },
  footer: {
    display: "flex",
    flexDirection: "row",
    justifyContent: "right",
    marginTop: theme.spacing(2)
  },
  formWrapper: {
    padding: theme.spacing(2)
  }
}));
const Stepper = (stepperProps) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const { layouts = [], components = {}, ...props } = stepperProps;
  const {
    ReviewStateComponent = ReviewState,
    ReviewStepComponent,
    backButtonText = "Back",
    createButtonText = "Create",
    reviewButtonText = "Review"
  } = components;
  const analytics = useAnalytics();
  const { presentation, steps } = useTemplateSchema(props.manifest);
  const apiHolder = useApiHolder();
  const [activeStep, setActiveStep] = useState(0);
  const [isValidating, setIsValidating] = useState(false);
  const [formState, setFormState] = useFormDataFromQuery(props.initialState);
  const [errors, setErrors] = useState();
  const styles = useStyles();
  const backLabel = (_b = (_a = presentation == null ? void 0 : presentation.buttonLabels) == null ? void 0 : _a.backButtonText) != null ? _b : backButtonText;
  const createLabel = (_d = (_c = presentation == null ? void 0 : presentation.buttonLabels) == null ? void 0 : _c.createButtonText) != null ? _d : createButtonText;
  const reviewLabel = (_f = (_e = presentation == null ? void 0 : presentation.buttonLabels) == null ? void 0 : _e.reviewButtonText) != null ? _f : reviewButtonText;
  const extensions = useMemo(() => {
    return Object.fromEntries(
      props.extensions.map(({ name, component }) => [name, component])
    );
  }, [props.extensions]);
  const fields = useMemo(
    () => ({ ...index, ...extensions }),
    [extensions]
  );
  const validators = useMemo(() => {
    return Object.fromEntries(
      props.extensions.map(({ name, validation: validation2 }) => [name, validation2])
    );
  }, [props.extensions]);
  const validation = useMemo(() => {
    var _a2;
    return createAsyncValidators((_a2 = steps[activeStep]) == null ? void 0 : _a2.mergedSchema, validators, {
      apiHolder
    });
  }, [steps, activeStep, validators, apiHolder]);
  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };
  const handleChange = useCallback(
    (e) => setFormState((current) => ({ ...current, ...e.formData })),
    [setFormState]
  );
  const handleCreate = useCallback(() => {
    props.onCreate(formState);
    analytics.captureEvent("click", `${createLabel}`);
  }, [props, formState, analytics, createLabel]);
  const currentStep = useTransformSchemaToProps(steps[activeStep], { layouts });
  const handleNext = async ({
    formData = {}
  }) => {
    setErrors(void 0);
    setIsValidating(true);
    const returnedValidation = await validation(formData);
    setIsValidating(false);
    if (hasErrors(returnedValidation)) {
      setErrors(returnedValidation);
    } else {
      setErrors(void 0);
      setActiveStep((prevActiveStep) => {
        const stepNum = prevActiveStep + 1;
        analytics.captureEvent("click", `Next Step (${stepNum})`);
        return stepNum;
      });
    }
    setFormState((current) => ({ ...current, ...formData }));
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, isValidating && /* @__PURE__ */ React.createElement(LinearProgress, { variant: "indeterminate" }), /* @__PURE__ */ React.createElement(
    MuiStepper,
    {
      activeStep,
      alternativeLabel: true,
      variant: "elevation",
      style: { overflowX: "auto" }
    },
    steps.map((step, index) => {
      const isAllowedLabelClick = activeStep > index;
      return /* @__PURE__ */ React.createElement(MuiStep, { key: index }, /* @__PURE__ */ React.createElement(
        MuiStepLabel,
        {
          "aria-label": `Step ${index + 1}`,
          style: { cursor: isAllowedLabelClick ? "pointer" : "default" },
          onClick: () => {
            if (isAllowedLabelClick)
              setActiveStep(index);
          }
        },
        step.title
      ));
    }),
    /* @__PURE__ */ React.createElement(MuiStep, null, /* @__PURE__ */ React.createElement(MuiStepLabel, null, "$", reviewLabel))
  ), /* @__PURE__ */ React.createElement("div", { className: styles.formWrapper }, activeStep < steps.length ? /* @__PURE__ */ React.createElement(
    Form,
    {
      validator,
      extraErrors: errors,
      formData: formState,
      formContext: { formData: formState },
      schema: currentStep.schema,
      uiSchema: currentStep.uiSchema,
      onSubmit: handleNext,
      fields,
      showErrorList: "top",
      templates: { ErrorListTemplate },
      onChange: handleChange,
      experimental_defaultFormStateBehavior: {
        allOf: "populateDefaults"
      },
      ...(_g = props.formProps) != null ? _g : {}
    },
    /* @__PURE__ */ React.createElement("div", { className: styles.footer }, /* @__PURE__ */ React.createElement(
      Button,
      {
        onClick: handleBack,
        className: styles.backButton,
        disabled: activeStep < 1 || isValidating
      },
      backLabel
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "primary",
        type: "submit",
        disabled: isValidating
      },
      activeStep === steps.length - 1 ? reviewLabel : "Next"
    ))
  ) : (
    // TODO: potentially move away from this pattern, deprecate?
    ReviewStepComponent ? /* @__PURE__ */ React.createElement(
      ReviewStepComponent,
      {
        disableButtons: isValidating,
        formData: formState,
        handleBack,
        handleReset: () => {
        },
        steps,
        handleCreate
      }
    ) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ReviewStateComponent, { formState, schemas: steps }), /* @__PURE__ */ React.createElement("div", { className: styles.footer }, /* @__PURE__ */ React.createElement(
      Button,
      {
        onClick: handleBack,
        className: styles.backButton,
        disabled: activeStep < 1
      },
      backLabel
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "primary",
        onClick: handleCreate
      },
      createLabel
    )))
  )));
};

export { Stepper };
//# sourceMappingURL=Stepper.esm.js.map
