import { useApi, featureFlagsApiRef } from '@backstage/core-plugin-api';
import { extractSchemaFromStep } from '../lib/schema.esm.js';

const useTemplateSchema = (manifest) => {
  const featureFlags = useApi(featureFlagsApiRef);
  const steps = manifest.steps.map(({ title, description, schema }) => ({
    title,
    description,
    mergedSchema: schema,
    ...extractSchemaFromStep(schema)
  }));
  const returningSteps = steps.filter((step) => {
    var _a;
    const stepFeatureFlag = (_a = step.uiSchema["ui:backstage"]) == null ? void 0 : _a.featureFlag;
    return stepFeatureFlag ? featureFlags.isActive(stepFeatureFlag) : true;
  }).map((step) => {
    var _a, _b, _c, _d;
    const strippedSchema = {
      ...step,
      schema: {
        ...step.schema,
        // Title is rendered at the top of the page, so let's ignore this from jsonschemaform
        title: void 0
      }
    };
    if (((_a = step.schema) == null ? void 0 : _a.properties) || !((_b = step.schema) == null ? void 0 : _b.dependencies)) {
      strippedSchema.schema.properties = Object.fromEntries(
        Object.entries((_d = (_c = step.schema) == null ? void 0 : _c.properties) != null ? _d : {}).filter(
          ([key]) => {
            var _a2, _b2;
            const stepFeatureFlag = (_b2 = (_a2 = step.uiSchema[key]) == null ? void 0 : _a2["ui:backstage"]) == null ? void 0 : _b2.featureFlag;
            return stepFeatureFlag ? featureFlags.isActive(stepFeatureFlag) : true;
          }
        )
      );
    }
    return strippedSchema;
  });
  return {
    presentation: manifest.presentation,
    steps: returningSteps
  };
};

export { useTemplateSchema };
//# sourceMappingURL=useTemplateSchema.esm.js.map
