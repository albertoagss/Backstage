import OAuth2 from '../oauth2/OAuth2.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const DEFAULT_PROVIDER = {
  id: "microsoft",
  title: "Microsoft",
  icon: () => null
};
const _MicrosoftAuth = class _MicrosoftAuth {
  constructor(options) {
    __publicField(this, "oauth2");
    __publicField(this, "configApi");
    __publicField(this, "environment");
    __publicField(this, "provider");
    __publicField(this, "oauthRequestApi");
    __publicField(this, "discoveryApi");
    __publicField(this, "scopeTransform");
    const {
      configApi,
      environment = "development",
      provider = DEFAULT_PROVIDER,
      oauthRequestApi,
      discoveryApi,
      defaultScopes = [
        "openid",
        "offline_access",
        "profile",
        "email",
        "User.Read"
      ],
      scopeTransform = (scopes) => scopes.concat("offline_access")
    } = options;
    this.configApi = configApi;
    this.environment = environment;
    this.provider = provider;
    this.oauthRequestApi = oauthRequestApi;
    this.discoveryApi = discoveryApi;
    this.scopeTransform = scopeTransform;
    this.oauth2 = {
      [_MicrosoftAuth.MicrosoftGraphID]: OAuth2.create({
        configApi: this.configApi,
        discoveryApi: this.discoveryApi,
        oauthRequestApi: this.oauthRequestApi,
        provider: this.provider,
        environment: this.environment,
        scopeTransform: this.scopeTransform,
        defaultScopes
      })
    };
  }
  static create(options) {
    return new _MicrosoftAuth(options);
  }
  microsoftGraph() {
    return this.oauth2[_MicrosoftAuth.MicrosoftGraphID];
  }
  static resourceForScopes(scope) {
    var _a;
    const audiences = [
      ...new Set(
        scope.split(" ").map(_MicrosoftAuth.resourceForScope).filter((aud) => aud !== "openid")
      )
    ];
    if (audiences.length > 1) {
      return Promise.reject(
        new Error(
          `Requested access token with scopes from multiple Azure resources: ${audiences.join(
            ", "
          )}. Access tokens can only have a single audience.`
        )
      );
    }
    const audience = (_a = audiences[0]) != null ? _a : _MicrosoftAuth.MicrosoftGraphID;
    return Promise.resolve(audience);
  }
  static resourceForScope(scope) {
    var _a;
    const groups = (_a = scope.match(/^(?<resourceURI>.*)\/(?<scp>[^\/]*)$/)) == null ? void 0 : _a.groups;
    if (groups) {
      const { resourceURI } = groups;
      const aud = resourceURI.replace(/^api:\/\//, "");
      return aud;
    }
    switch (scope) {
      case "email":
      case "openid":
      case "offline_access":
      case "profile": {
        return "openid";
      }
      default:
        return _MicrosoftAuth.MicrosoftGraphID;
    }
  }
  async getAccessToken(scope, options) {
    const aud = scope === void 0 ? _MicrosoftAuth.MicrosoftGraphID : await _MicrosoftAuth.resourceForScopes(
      Array.isArray(scope) ? scope.join(" ") : scope
    );
    if (!(aud in this.oauth2)) {
      this.oauth2[aud] = OAuth2.create({
        configApi: this.configApi,
        discoveryApi: this.discoveryApi,
        oauthRequestApi: this.oauthRequestApi,
        provider: this.provider,
        environment: this.environment,
        scopeTransform: this.scopeTransform
      });
    }
    return this.oauth2[aud].getAccessToken(scope, options);
  }
  getIdToken(options) {
    return this.microsoftGraph().getIdToken(options);
  }
  getProfile(options) {
    return this.microsoftGraph().getProfile(options);
  }
  getBackstageIdentity(options) {
    return this.microsoftGraph().getBackstageIdentity(options);
  }
  signIn() {
    return this.microsoftGraph().signIn();
  }
  signOut() {
    return this.microsoftGraph().signOut();
  }
  sessionState$() {
    return this.microsoftGraph().sessionState$();
  }
};
__publicField(_MicrosoftAuth, "MicrosoftGraphID", "00000003-0000-0000-c000-000000000000");
let MicrosoftAuth = _MicrosoftAuth;

export { MicrosoftAuth as default };
//# sourceMappingURL=MicrosoftAuth.esm.js.map
