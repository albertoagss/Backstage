import { DefaultAuthConnector } from '../../../../lib/AuthConnector/DefaultAuthConnector.esm.js';
import { RefreshingAuthSessionManager } from '../../../../lib/AuthSessionManager/RefreshingAuthSessionManager.esm.js';
import 'zen-observable';
import '@backstage/core-plugin-api';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const DEFAULT_PROVIDER = {
  id: "oauth2",
  title: "Your Identity Provider",
  icon: () => null
};
class OAuth2 {
  constructor(options) {
    __publicField(this, "sessionManager");
    __publicField(this, "scopeTransform");
    this.sessionManager = options.sessionManager;
    this.scopeTransform = options.scopeTransform;
  }
  static create(options) {
    const {
      configApi,
      discoveryApi,
      environment = "development",
      provider = DEFAULT_PROVIDER,
      oauthRequestApi,
      defaultScopes = [],
      scopeTransform = (x) => x,
      popupOptions
    } = options;
    const connector = new DefaultAuthConnector({
      configApi,
      discoveryApi,
      environment,
      provider,
      oauthRequestApi,
      sessionTransform({
        backstageIdentity,
        ...res
      }) {
        const session = {
          ...res,
          providerInfo: {
            idToken: res.providerInfo.idToken,
            accessToken: res.providerInfo.accessToken,
            scopes: OAuth2.normalizeScopes(
              scopeTransform,
              res.providerInfo.scope
            ),
            expiresAt: res.providerInfo.expiresInSeconds ? new Date(Date.now() + res.providerInfo.expiresInSeconds * 1e3) : void 0
          }
        };
        if (backstageIdentity) {
          session.backstageIdentity = {
            token: backstageIdentity.token,
            identity: backstageIdentity.identity,
            expiresAt: backstageIdentity.expiresInSeconds ? new Date(Date.now() + backstageIdentity.expiresInSeconds * 1e3) : void 0
          };
        }
        return session;
      },
      popupOptions
    });
    const sessionManager = new RefreshingAuthSessionManager({
      connector,
      defaultScopes: new Set(defaultScopes),
      sessionScopes: (session) => session.providerInfo.scopes,
      sessionShouldRefresh: (session) => {
        var _a, _b;
        let min = Infinity;
        if ((_a = session.providerInfo) == null ? void 0 : _a.expiresAt) {
          min = Math.min(
            min,
            (session.providerInfo.expiresAt.getTime() - Date.now()) / 1e3
          );
        }
        if ((_b = session.backstageIdentity) == null ? void 0 : _b.expiresAt) {
          min = Math.min(
            min,
            (session.backstageIdentity.expiresAt.getTime() - Date.now()) / 1e3
          );
        }
        return min < 60 * 5;
      }
    });
    return new OAuth2({ sessionManager, scopeTransform });
  }
  async signIn() {
    await this.getAccessToken();
  }
  async signOut() {
    await this.sessionManager.removeSession();
  }
  sessionState$() {
    return this.sessionManager.sessionState$();
  }
  async getAccessToken(scope, options) {
    var _a;
    const normalizedScopes = OAuth2.normalizeScopes(this.scopeTransform, scope);
    const session = await this.sessionManager.getSession({
      ...options,
      scopes: normalizedScopes
    });
    return (_a = session == null ? void 0 : session.providerInfo.accessToken) != null ? _a : "";
  }
  async getIdToken(options = {}) {
    var _a;
    const session = await this.sessionManager.getSession({
      ...options,
      scopes: /* @__PURE__ */ new Set(["openid"])
    });
    return (_a = session == null ? void 0 : session.providerInfo.idToken) != null ? _a : "";
  }
  async getBackstageIdentity(options = {}) {
    const session = await this.sessionManager.getSession(options);
    return session == null ? void 0 : session.backstageIdentity;
  }
  async getProfile(options = {}) {
    const session = await this.sessionManager.getSession(options);
    return session == null ? void 0 : session.profile;
  }
  static normalizeScopes(scopeTransform, scopes) {
    if (!scopes) {
      return /* @__PURE__ */ new Set();
    }
    const scopeList = Array.isArray(scopes) ? scopes : scopes.split(/[\s|,]/).filter(Boolean);
    return new Set(scopeTransform(scopeList));
  }
}

export { OAuth2 as default };
//# sourceMappingURL=OAuth2.esm.js.map
