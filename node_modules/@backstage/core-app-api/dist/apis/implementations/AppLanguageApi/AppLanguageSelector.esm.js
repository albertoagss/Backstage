import { BehaviorSubject } from '../../../lib/subjects.esm.js';
import '@backstage/core-plugin-api';

var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  member.set(obj, value);
  return value;
};
var _languages, _language, _subject;
const STORAGE_KEY = "language";
const DEFAULT_LANGUAGE = "en";
const _AppLanguageSelector = class _AppLanguageSelector {
  constructor(languages, initialLanguage) {
    __privateAdd(this, _languages, void 0);
    __privateAdd(this, _language, void 0);
    __privateAdd(this, _subject, void 0);
    __privateSet(this, _languages, languages);
    __privateSet(this, _language, initialLanguage);
    __privateSet(this, _subject, new BehaviorSubject({
      language: __privateGet(this, _language)
    }));
  }
  static create(options) {
    var _a, _b;
    const languages = (_a = options == null ? void 0 : options.availableLanguages) != null ? _a : [DEFAULT_LANGUAGE];
    if (languages.length !== new Set(languages).size) {
      throw new Error(
        `Supported languages may not contain duplicates, got '${languages.join(
          "', '"
        )}'`
      );
    }
    if (!languages.includes(DEFAULT_LANGUAGE)) {
      throw new Error(`Supported languages must include '${DEFAULT_LANGUAGE}'`);
    }
    const initialLanguage = (_b = options == null ? void 0 : options.defaultLanguage) != null ? _b : DEFAULT_LANGUAGE;
    if (!languages.includes(initialLanguage)) {
      throw new Error(
        `Initial language must be one of the supported languages, got '${initialLanguage}'`
      );
    }
    return new _AppLanguageSelector(languages, initialLanguage);
  }
  static createWithStorage(options) {
    const selector = _AppLanguageSelector.create(options);
    if (!window.localStorage) {
      return selector;
    }
    const storedLanguage = window.localStorage.getItem(STORAGE_KEY);
    const { languages } = selector.getAvailableLanguages();
    if (storedLanguage && languages.includes(storedLanguage)) {
      selector.setLanguage(storedLanguage);
    }
    selector.language$().subscribe(({ language }) => {
      if (language !== window.localStorage.getItem(STORAGE_KEY)) {
        window.localStorage.setItem(STORAGE_KEY, language);
      }
    });
    window.addEventListener("storage", (event) => {
      var _a;
      if (event.key === STORAGE_KEY) {
        const language = (_a = localStorage.getItem(STORAGE_KEY)) != null ? _a : void 0;
        if (language) {
          selector.setLanguage(language);
        }
      }
    });
    return selector;
  }
  getAvailableLanguages() {
    return { languages: __privateGet(this, _languages).slice() };
  }
  setLanguage(language) {
    const lng = language != null ? language : DEFAULT_LANGUAGE;
    if (lng === __privateGet(this, _language)) {
      return;
    }
    if (lng && !__privateGet(this, _languages).includes(lng)) {
      throw new Error(
        `Failed to change language to '${lng}', available languages are '${__privateGet(this, _languages).join(
          "', '"
        )}'`
      );
    }
    __privateSet(this, _language, lng);
    __privateGet(this, _subject).next({ language: lng });
  }
  getLanguage() {
    return { language: __privateGet(this, _language) };
  }
  language$() {
    return __privateGet(this, _subject);
  }
};
_languages = new WeakMap();
_language = new WeakMap();
_subject = new WeakMap();
let AppLanguageSelector = _AppLanguageSelector;

export { AppLanguageSelector, DEFAULT_LANGUAGE };
//# sourceMappingURL=AppLanguageSelector.esm.js.map
