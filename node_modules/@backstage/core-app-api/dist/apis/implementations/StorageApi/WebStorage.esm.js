import ObservableImpl from 'zen-observable';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const buckets = /* @__PURE__ */ new Map();
const _WebStorage = class _WebStorage {
  constructor(namespace, errorApi) {
    this.namespace = namespace;
    this.errorApi = errorApi;
    __publicField(this, "subscribers", /* @__PURE__ */ new Set());
    __publicField(this, "observable", new ObservableImpl((subscriber) => {
      this.subscribers.add(subscriber);
      return () => {
        this.subscribers.delete(subscriber);
      };
    }));
  }
  static create(options) {
    var _a;
    return new _WebStorage((_a = options.namespace) != null ? _a : "", options.errorApi);
  }
  static addStorageEventListener() {
    window.addEventListener("storage", (event) => {
      var _a;
      for (const [bucketPath, webStorage] of buckets.entries()) {
        if ((_a = event.key) == null ? void 0 : _a.startsWith(bucketPath)) {
          webStorage.handleStorageChange(event.key);
        }
      }
    });
  }
  get(key) {
    return this.snapshot(key).value;
  }
  snapshot(key) {
    let value = void 0;
    let presence = "absent";
    try {
      const item = localStorage.getItem(this.getKeyName(key));
      if (item) {
        value = JSON.parse(item, (_key, val) => {
          if (typeof val === "object" && val !== null) {
            Object.freeze(val);
          }
          return val;
        });
        presence = "present";
      }
    } catch (e) {
      this.errorApi.post(
        new Error(`Error when parsing JSON config from storage for: ${key}`)
      );
    }
    return { key, value, presence };
  }
  forBucket(name) {
    const bucketPath = `${this.namespace}/${name}`;
    if (!buckets.has(bucketPath)) {
      buckets.set(bucketPath, new _WebStorage(bucketPath, this.errorApi));
    }
    return buckets.get(bucketPath);
  }
  async set(key, data) {
    localStorage.setItem(this.getKeyName(key), JSON.stringify(data));
    this.notifyChanges(key);
  }
  async remove(key) {
    localStorage.removeItem(this.getKeyName(key));
    this.notifyChanges(key);
  }
  observe$(key) {
    if (!_WebStorage.hasSubscribed) {
      _WebStorage.addStorageEventListener();
      _WebStorage.hasSubscribed = true;
    }
    return this.observable.filter(({ key: messageKey }) => messageKey === key);
  }
  handleStorageChange(eventKey) {
    if (!(eventKey == null ? void 0 : eventKey.startsWith(this.namespace))) {
      return;
    }
    const trimmedKey = eventKey == null ? void 0 : eventKey.slice(`${this.namespace}/`.length);
    if (!trimmedKey.includes("/")) {
      this.notifyChanges(decodeURIComponent(trimmedKey));
    }
  }
  getKeyName(key) {
    return `${this.namespace}/${encodeURIComponent(key)}`;
  }
  notifyChanges(key) {
    const snapshot = this.snapshot(key);
    for (const subscription of this.subscribers) {
      subscription.next(snapshot);
    }
  }
};
__publicField(_WebStorage, "hasSubscribed", false);
let WebStorage = _WebStorage;

export { WebStorage, buckets };
//# sourceMappingURL=WebStorage.esm.js.map
