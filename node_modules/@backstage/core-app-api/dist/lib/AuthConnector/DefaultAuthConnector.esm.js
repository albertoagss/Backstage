import { showLoginPopup } from '../loginPopup.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
let warned = false;
function defaultJoinScopes(scopes) {
  return [...scopes].join(" ");
}
class DefaultAuthConnector {
  constructor(options) {
    __publicField(this, "discoveryApi");
    __publicField(this, "environment");
    __publicField(this, "provider");
    __publicField(this, "joinScopesFunc");
    __publicField(this, "authRequester");
    __publicField(this, "sessionTransform");
    __publicField(this, "enableExperimentalRedirectFlow");
    __publicField(this, "popupOptions");
    var _a;
    const {
      configApi,
      discoveryApi,
      environment,
      provider,
      joinScopes = defaultJoinScopes,
      oauthRequestApi,
      sessionTransform = (id) => id,
      popupOptions
    } = options;
    if (!warned && !configApi) {
      console.warn(
        "DEPRECATION WARNING: Authentication providers require a configApi instance to configure the authentication flow. Please provide one to the authentication provider constructor."
      );
      warned = true;
    }
    this.enableExperimentalRedirectFlow = configApi ? (_a = configApi.getOptionalBoolean("enableExperimentalRedirectFlow")) != null ? _a : false : false;
    this.authRequester = oauthRequestApi.createAuthRequester({
      provider,
      onAuthRequest: async (scopes) => {
        if (!this.enableExperimentalRedirectFlow) {
          return this.showPopup(scopes);
        }
        return this.executeRedirect(scopes);
      }
    });
    this.discoveryApi = discoveryApi;
    this.environment = environment;
    this.provider = provider;
    this.joinScopesFunc = joinScopes;
    this.sessionTransform = sessionTransform;
    this.popupOptions = popupOptions;
  }
  async createSession(options) {
    if (options.instantPopup) {
      if (this.enableExperimentalRedirectFlow) {
        return this.executeRedirect(options.scopes);
      }
      return this.showPopup(options.scopes);
    }
    return this.authRequester(options.scopes);
  }
  async refreshSession(scopes) {
    const res = await fetch(
      await this.buildUrl("/refresh", {
        optional: true,
        ...scopes && { scope: this.joinScopesFunc(scopes) }
      }),
      {
        headers: {
          "x-requested-with": "XMLHttpRequest"
        },
        credentials: "include"
      }
    ).catch((error) => {
      throw new Error(`Auth refresh request failed, ${error}`);
    });
    if (!res.ok) {
      const error = new Error(
        `Auth refresh request failed, ${res.statusText}`
      );
      error.status = res.status;
      throw error;
    }
    const authInfo = await res.json();
    if (authInfo.error) {
      const error = new Error(authInfo.error.message);
      if (authInfo.error.name) {
        error.name = authInfo.error.name;
      }
      throw error;
    }
    return await this.sessionTransform(authInfo);
  }
  async removeSession() {
    const res = await fetch(await this.buildUrl("/logout"), {
      method: "POST",
      headers: {
        "x-requested-with": "XMLHttpRequest"
      },
      credentials: "include"
    }).catch((error) => {
      throw new Error(`Logout request failed, ${error}`);
    });
    if (!res.ok) {
      const error = new Error(`Logout request failed, ${res.statusText}`);
      error.status = res.status;
      throw error;
    }
  }
  async showPopup(scopes) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const scope = this.joinScopesFunc(scopes);
    const popupUrl = await this.buildUrl("/start", {
      scope,
      origin: window.location.origin,
      flow: "popup"
    });
    const width = ((_b = (_a = this.popupOptions) == null ? void 0 : _a.size) == null ? void 0 : _b.fullscreen) ? window.screen.width : ((_d = (_c = this.popupOptions) == null ? void 0 : _c.size) == null ? void 0 : _d.width) || 450;
    const height = ((_f = (_e = this.popupOptions) == null ? void 0 : _e.size) == null ? void 0 : _f.fullscreen) ? window.screen.height : ((_h = (_g = this.popupOptions) == null ? void 0 : _g.size) == null ? void 0 : _h.height) || 730;
    const payload = await showLoginPopup({
      url: popupUrl,
      name: `${this.provider.title} Login`,
      origin: new URL(popupUrl).origin,
      width,
      height
    });
    return await this.sessionTransform(payload);
  }
  async executeRedirect(scopes) {
    const scope = this.joinScopesFunc(scopes);
    window.location.href = await this.buildUrl("/start", {
      scope,
      origin: window.location.origin,
      redirectUrl: window.location.href,
      flow: "redirect"
    });
    return new Promise(() => {
    });
  }
  async buildUrl(path, query) {
    const baseUrl = await this.discoveryApi.getBaseUrl("auth");
    const queryString = this.buildQueryString({
      ...query,
      env: this.environment
    });
    return `${baseUrl}/${this.provider.id}${path}${queryString}`;
  }
  buildQueryString(query) {
    if (!query) {
      return "";
    }
    const queryString = Object.entries(query).map(([key, value]) => {
      if (typeof value === "string") {
        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
      } else if (value) {
        return encodeURIComponent(key);
      }
      return void 0;
    }).filter(Boolean).join("&");
    if (!queryString) {
      return "";
    }
    return `?${queryString}`;
  }
}

export { DefaultAuthConnector };
//# sourceMappingURL=DefaultAuthConnector.esm.js.map
