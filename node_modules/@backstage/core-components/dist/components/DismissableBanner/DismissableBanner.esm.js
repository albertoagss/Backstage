import React, { useState, useEffect } from 'react';
import { useApi, storageApiRef } from '@backstage/core-plugin-api';
import useObservable from 'react-use/esm/useObservable';
import classNames from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Snackbar from '@material-ui/core/Snackbar';
import SnackbarContent from '@material-ui/core/SnackbarContent';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';

const useStyles = makeStyles(
  (theme) => {
    var _a, _b;
    return {
      root: {
        padding: theme.spacing(0),
        marginBottom: theme.spacing(0),
        marginTop: theme.spacing(0),
        display: "flex",
        flexFlow: "row nowrap"
      },
      // showing on top
      topPosition: {
        position: "relative",
        marginBottom: theme.spacing(6),
        marginTop: -theme.spacing(3),
        zIndex: "unset"
      },
      icon: {
        fontSize: theme.typography.h6.fontSize
      },
      content: {
        width: "100%",
        maxWidth: "inherit",
        flexWrap: "nowrap",
        color: theme.palette.banner.text
      },
      message: {
        display: "flex",
        alignItems: "center",
        "& a": {
          color: theme.palette.banner.link
        }
      },
      button: {
        color: (_a = theme.palette.banner.closeButtonColor) != null ? _a : "inherit"
      },
      info: {
        backgroundColor: theme.palette.banner.info
      },
      error: {
        backgroundColor: theme.palette.banner.error
      },
      warning: {
        backgroundColor: (_b = theme.palette.banner.warning) != null ? _b : theme.palette.banner.error
      }
    };
  },
  { name: "BackstageDismissableBanner" }
);
const DismissableBanner = (props) => {
  var _a;
  const { variant, message, id, fixed = false } = props;
  const classes = useStyles();
  const storageApi = useApi(storageApiRef);
  const notificationsStore = storageApi.forBucket("notifications");
  const rawDismissedBanners = (_a = notificationsStore.snapshot("dismissedBanners").value) != null ? _a : [];
  const [dismissedBanners, setDismissedBanners] = useState(
    new Set(rawDismissedBanners)
  );
  const observedItems = useObservable(
    notificationsStore.observe$("dismissedBanners")
  );
  useEffect(() => {
    var _a2;
    if (observedItems == null ? void 0 : observedItems.value) {
      const currentValue = (_a2 = observedItems == null ? void 0 : observedItems.value) != null ? _a2 : [];
      setDismissedBanners(new Set(currentValue));
    }
  }, [observedItems == null ? void 0 : observedItems.value]);
  const handleClick = () => {
    notificationsStore.set("dismissedBanners", [...dismissedBanners, id]);
  };
  return /* @__PURE__ */ React.createElement(
    Snackbar,
    {
      anchorOrigin: fixed ? { vertical: "bottom", horizontal: "center" } : { vertical: "top", horizontal: "center" },
      open: !dismissedBanners.has(id),
      classes: {
        root: classNames(classes.root, !fixed && classes.topPosition)
      }
    },
    /* @__PURE__ */ React.createElement(
      SnackbarContent,
      {
        classes: {
          root: classNames(classes.content, classes[variant]),
          message: classes.message
        },
        message,
        action: [
          /* @__PURE__ */ React.createElement(
            IconButton,
            {
              key: "dismiss",
              title: "Permanently dismiss this message",
              className: classes.button,
              onClick: handleClick
            },
            /* @__PURE__ */ React.createElement(CloseIcon, { className: classes.icon })
          )
        ]
      }
    )
  );
};

export { DismissableBanner };
//# sourceMappingURL=DismissableBanner.esm.js.map
