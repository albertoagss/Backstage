import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import { makeStyles } from '@material-ui/core/styles';
import React, { useState, useEffect } from 'react';
import { SelectComponent } from '../Select/Select.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useFilterStyles = makeStyles(
  (theme) => ({
    root: {
      height: "100%",
      width: "315px",
      display: "flex",
      flexDirection: "column",
      marginRight: theme.spacing(3)
    },
    value: {
      fontWeight: "bold",
      fontSize: 18
    },
    header: {
      display: "flex",
      alignItems: "center",
      height: theme.spacing(7.5),
      justifyContent: "space-between",
      borderBottom: `1px solid ${theme.palette.grey[500]}`
    },
    filters: {
      display: "flex",
      flexDirection: "column",
      "& > *": {
        marginTop: theme.spacing(2)
      }
    }
  }),
  { name: "BackstageTableFilters" }
);
const Filters = (props) => {
  var _a;
  const classes = useFilterStyles();
  const { onChangeFilters } = props;
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const [selectedFilters, setSelectedFilters] = useState({
    ...props.selectedFilters
  });
  const [reset, triggerReset] = useState(false);
  const handleClick = () => {
    setSelectedFilters({});
    triggerReset((el) => !el);
  };
  useEffect(() => {
    onChangeFilters(selectedFilters);
  }, [selectedFilters, onChangeFilters]);
  return /* @__PURE__ */ React.createElement(Box, { className: classes.root }, /* @__PURE__ */ React.createElement(Box, { className: classes.header }, /* @__PURE__ */ React.createElement(Box, { className: classes.value }, t("table.filter.title")), /* @__PURE__ */ React.createElement(Button, { color: "primary", onClick: handleClick }, t("table.filter.clearAll"))), /* @__PURE__ */ React.createElement(Box, { className: classes.filters }, ((_a = props.filters) == null ? void 0 : _a.length) && props.filters.map((filter) => /* @__PURE__ */ React.createElement(
    SelectComponent,
    {
      triggerReset: reset,
      key: filter.element.label,
      ...filter.element,
      selected: selectedFilters[filter.element.label],
      onChange: (el) => setSelectedFilters({
        ...selectedFilters,
        [filter.element.label]: el
      })
    }
  ))));
};

export { Filters };
//# sourceMappingURL=Filters.esm.js.map
