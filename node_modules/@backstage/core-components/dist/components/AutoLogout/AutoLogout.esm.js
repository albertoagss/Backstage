import { useApi, identityApiRef, configApiRef } from '@backstage/core-plugin-api';
import React, { useState, useEffect, useMemo } from 'react';
import { useIdleTimer, workerTimers } from 'react-idle-timer';
import { LAST_SEEN_ONLINE_STORAGE_KEY, useLogoutDisconnectedUserEffect } from './disconnectedUsers.esm.js';
import { StillTherePrompt } from './StillTherePrompt.esm.js';
import { DefaultTimestampStore } from './timestampStore.esm.js';

const ConditionalAutoLogout = ({
  idleTimeoutMinutes,
  events,
  useWorkerTimers,
  logoutIfDisconnected,
  promptBeforeIdleSeconds,
  promptOpen,
  setPromptOpen,
  remainingTimeCountdown,
  setRemainingTimeCountdown,
  identityApi,
  lastSeenOnlineStore
}) => {
  const promptBeforeIdleMillis = promptBeforeIdleSeconds * 1e3;
  const promptBeforeIdle = promptBeforeIdleMillis > 0 ? true : false;
  const onPrompt = async () => {
    setPromptOpen(true);
    setRemainingTimeCountdown(promptBeforeIdleMillis);
  };
  const onIdle = () => {
    setPromptOpen(false);
    setRemainingTimeCountdown(0);
    identityApi.signOut();
  };
  const onActive = () => {
    setPromptOpen(false);
    setRemainingTimeCountdown(0);
  };
  const onAction = (_event, _idleTimer) => {
    lastSeenOnlineStore.save(/* @__PURE__ */ new Date());
  };
  const timer = useIdleTimer({
    timeout: idleTimeoutMinutes * 60 * 1e3,
    events,
    crossTab: true,
    name: "autologout-timer",
    timers: useWorkerTimers ? workerTimers : void 0,
    onIdle,
    onActive: promptBeforeIdle ? onActive : void 0,
    onAction: logoutIfDisconnected ? onAction : void 0,
    onPrompt: promptBeforeIdle ? onPrompt : void 0,
    promptBeforeIdle: promptBeforeIdle ? promptBeforeIdleMillis : void 0,
    syncTimers: 1e3
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, promptBeforeIdle && /* @__PURE__ */ React.createElement(
    StillTherePrompt,
    {
      idleTimer: timer,
      open: promptOpen,
      setOpen: setPromptOpen,
      remainingTime: remainingTimeCountdown,
      setRemainingTime: setRemainingTimeCountdown,
      promptTimeoutMillis: promptBeforeIdleMillis
    }
  ));
};
const defaultConfig = {
  enabled: true,
  idleTimeoutMinutes: 0.5,
  promptBeforeIdleSeconds: 10,
  useWorkerTimers: true,
  logoutIfDisconnected: true
};
const defaultTrackedEvents = [
  "mousemove",
  "keydown",
  "wheel",
  "DOMMouseScroll",
  "mousewheel",
  "mousedown",
  "touchstart",
  "touchmove",
  "MSPointerDown",
  "MSPointerMove",
  "visibilitychange"
];
const parseConfig = (configApi, props) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  return {
    enabled: (_b = (_a = configApi.getOptionalBoolean("auth.autologout.enabled")) != null ? _a : props.enabled) != null ? _b : defaultConfig.enabled,
    idleTimeoutMinutes: (_d = (_c = configApi.getOptionalNumber("auth.autologout.idleTimeoutMinutes")) != null ? _c : props.idleTimeoutMinutes) != null ? _d : defaultConfig.idleTimeoutMinutes,
    promptBeforeIdleSeconds: (_f = (_e = configApi.getOptionalNumber("auth.autologout.promptBeforeIdleSeconds")) != null ? _e : props.promptBeforeIdleSeconds) != null ? _f : defaultConfig.promptBeforeIdleSeconds,
    useWorkerTimers: (_h = (_g = configApi.getOptionalBoolean("auth.autologout.useWorkerTimers")) != null ? _g : props.useWorkerTimers) != null ? _h : defaultConfig.useWorkerTimers,
    logoutIfDisconnected: (_j = (_i = configApi.getOptionalBoolean("auth.autologout.logoutIfDisconnected")) != null ? _i : props.logoutIfDisconnected) != null ? _j : defaultConfig.logoutIfDisconnected
  };
};
const AutoLogout = (props) => {
  const identityApi = useApi(identityApiRef);
  const configApi = useApi(configApiRef);
  const [isLogged, setIsLogged] = useState(false);
  useEffect(() => {
    async function isLoggedIn(identity) {
      if ((await identity.getCredentials()).token) {
        setIsLogged(true);
      } else {
        setIsLogged(false);
      }
    }
    isLoggedIn(identityApi);
  }, [identityApi]);
  const {
    enabled,
    idleTimeoutMinutes,
    promptBeforeIdleSeconds,
    logoutIfDisconnected,
    useWorkerTimers
  } = useMemo(() => {
    return parseConfig(configApi, props);
  }, [configApi, props]);
  useEffect(() => {
    if (idleTimeoutMinutes < 0.5) {
      throw new Error(
        "\u274C idleTimeoutMinutes property should be >= 0.5 minutes (30 seconds)."
      );
    }
    if (promptBeforeIdleSeconds < 0) {
      throw new Error(
        "\u274C promptBeforeIdleSeconds property should be >= 0 seconds. Set to 0 to disable the prompt."
      );
    }
    if (idleTimeoutMinutes * 60 <= promptBeforeIdleSeconds) {
      throw new Error(
        `\u274C promptBeforeIdleSeconds should be smaller than idleTimeoutMinutes`
      );
    }
  }, [idleTimeoutMinutes, promptBeforeIdleSeconds]);
  const lastSeenOnlineStore = useMemo(
    () => new DefaultTimestampStore(LAST_SEEN_ONLINE_STORAGE_KEY),
    []
  );
  const [promptOpen, setPromptOpen] = useState(false);
  const [remainingTimeCountdown, setRemainingTimeCountdown] = useState(0);
  useLogoutDisconnectedUserEffect({
    enableEffect: logoutIfDisconnected,
    autologoutIsEnabled: enabled && isLogged,
    idleTimeoutSeconds: idleTimeoutMinutes * 60,
    lastSeenOnlineStore,
    identityApi
  });
  if (!enabled || !isLogged) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(
    ConditionalAutoLogout,
    {
      idleTimeoutMinutes,
      promptBeforeIdleSeconds,
      useWorkerTimers,
      events: defaultTrackedEvents,
      logoutIfDisconnected,
      promptOpen,
      setPromptOpen,
      remainingTimeCountdown,
      setRemainingTimeCountdown,
      identityApi,
      lastSeenOnlineStore
    }
  );
};

export { AutoLogout };
//# sourceMappingURL=AutoLogout.esm.js.map
