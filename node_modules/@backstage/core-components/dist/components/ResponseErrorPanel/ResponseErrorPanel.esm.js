import { makeStyles } from '@material-ui/core/styles';
import Divider from '@material-ui/core/Divider';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import React from 'react';
import { CodeSnippet } from '../CodeSnippet/CodeSnippet.esm.js';
import { CopyTextButton } from '../CopyTextButton/CopyTextButton.esm.js';
import { ErrorPanel } from '../ErrorPanel/ErrorPanel.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    text: {
      fontFamily: "monospace",
      whiteSpace: "pre",
      overflowX: "auto",
      marginRight: theme.spacing(2)
    },
    divider: {
      margin: theme.spacing(2)
    }
  }),
  { name: "BackstageResponseErrorPanel" }
);
function ResponseErrorPanel(props) {
  var _a;
  const { title, error, defaultExpanded } = props;
  const classes = useStyles();
  if (error.name !== "ResponseError") {
    return /* @__PURE__ */ React.createElement(
      ErrorPanel,
      {
        title: title != null ? title : error.message,
        defaultExpanded,
        error
      }
    );
  }
  const { body, cause } = error;
  const { request, response } = body;
  const errorString = `${response.statusCode}: ${cause.name}`;
  const requestString = request && `${request.method} ${request.url}`;
  const messageString = cause.message.replace(/\\n/g, "\n");
  const stackString = (_a = cause.stack) == null ? void 0 : _a.replace(/\\n/g, "\n");
  const jsonString = JSON.stringify(body, void 0, 2);
  return /* @__PURE__ */ React.createElement(
    ErrorPanel,
    {
      title: title != null ? title : error.message,
      defaultExpanded,
      error: { name: errorString, message: messageString, stack: stackString }
    },
    requestString && /* @__PURE__ */ React.createElement(ListItem, { alignItems: "flex-start" }, /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        classes: { secondary: classes.text },
        primary: "Request",
        secondary: request ? `${requestString}` : void 0
      }
    ), /* @__PURE__ */ React.createElement(CopyTextButton, { text: requestString })),
    /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Divider, { component: "li", className: classes.divider }), /* @__PURE__ */ React.createElement(ListItem, { alignItems: "flex-start" }, /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        classes: { secondary: classes.text },
        primary: "Full Error as JSON"
      }
    )), /* @__PURE__ */ React.createElement(CodeSnippet, { language: "json", text: jsonString, showCopyCodeButton: true }))
  );
}

export { ResponseErrorPanel };
//# sourceMappingURL=ResponseErrorPanel.esm.js.map
