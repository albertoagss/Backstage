import { useApp } from '@backstage/core-plugin-api';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import DialogActions from '@material-ui/core/DialogActions';
import IconButton from '@material-ui/core/IconButton';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import MenuItem from '@material-ui/core/MenuItem';
import MenuList from '@material-ui/core/MenuList';
import Popover from '@material-ui/core/Popover';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import useMediaQuery from '@material-ui/core/useMediaQuery';
import React, { useState } from 'react';
import 'lodash';
import 'qs';
import 'react-router-dom';
import '@react-hookz/web';
import { useSupportConfig } from '../../hooks/useSupportConfig.esm.js';
import { HelpIcon } from '../../icons/icons.esm.js';
import { Link } from '../Link/Link.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles(
  {
    popoverList: {
      minWidth: 260,
      maxWidth: 400
    },
    menuItem: {
      whiteSpace: "normal"
    }
  },
  { name: "BackstageSupportButton" }
);
const SupportIcon = ({ icon }) => {
  var _a;
  const app = useApp();
  const Icon = icon ? (_a = app.getSystemIcon(icon)) != null ? _a : HelpIcon : HelpIcon;
  return /* @__PURE__ */ React.createElement(Icon, null);
};
const SupportLink = ({ link }) => {
  var _a;
  return /* @__PURE__ */ React.createElement(Link, { to: link.url }, (_a = link.title) != null ? _a : link.url);
};
const SupportListItem = ({ item }) => {
  var _a;
  return /* @__PURE__ */ React.createElement(MenuItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(SupportIcon, { icon: item.icon })), /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      primary: item.title,
      secondary: (_a = item.links) == null ? void 0 : _a.reduce(
        (prev, link, idx) => [
          ...prev,
          idx > 0 && /* @__PURE__ */ React.createElement("br", { key: idx }),
          /* @__PURE__ */ React.createElement(SupportLink, { link, key: link.url })
        ],
        []
      )
    }
  ));
};
function SupportButton(props) {
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const { title, items, children } = props;
  const { items: configItems } = useSupportConfig();
  const [popoverOpen, setPopoverOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const classes = useStyles();
  const isSmallScreen = useMediaQuery(
    (theme) => theme.breakpoints.down("sm")
  );
  const onClickHandler = (event) => {
    setAnchorEl(event.currentTarget);
    setPopoverOpen(true);
  };
  const popoverCloseHandler = () => {
    setPopoverOpen(false);
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Box, { display: "flex", ml: 1 }, isSmallScreen ? /* @__PURE__ */ React.createElement(
    IconButton,
    {
      color: "primary",
      size: "small",
      onClick: onClickHandler,
      "data-testid": "support-button",
      "aria-label": "Support"
    },
    /* @__PURE__ */ React.createElement(HelpIcon, null)
  ) : /* @__PURE__ */ React.createElement(
    Button,
    {
      "data-testid": "support-button",
      "aria-label": "Support",
      color: "primary",
      onClick: onClickHandler,
      startIcon: /* @__PURE__ */ React.createElement(HelpIcon, null)
    },
    t("supportButton.title")
  )), /* @__PURE__ */ React.createElement(
    Popover,
    {
      "data-testid": "support-button-popover",
      open: popoverOpen,
      anchorEl,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "right"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "right"
      },
      onClose: popoverCloseHandler
    },
    /* @__PURE__ */ React.createElement(
      MenuList,
      {
        className: classes.popoverList,
        autoFocusItem: Boolean(anchorEl)
      },
      title && /* @__PURE__ */ React.createElement(MenuItem, { alignItems: "flex-start", className: classes.menuItem }, /* @__PURE__ */ React.createElement(Typography, { variant: "subtitle1" }, title)),
      React.Children.map(children, (child, i) => /* @__PURE__ */ React.createElement(
        MenuItem,
        {
          alignItems: "flex-start",
          key: `child-${i}`,
          className: classes.menuItem
        },
        child
      )),
      (items != null ? items : configItems).map((item, i) => /* @__PURE__ */ React.createElement(SupportListItem, { item, key: `item-${i}` }))
    ),
    /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(
      Button,
      {
        color: "primary",
        onClick: popoverCloseHandler,
        "aria-label": "Close"
      },
      t("supportButton.close")
    ))
  ));
}

export { SupportButton };
//# sourceMappingURL=SupportButton.esm.js.map
