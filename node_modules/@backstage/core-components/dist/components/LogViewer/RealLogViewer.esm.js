import Box from '@material-ui/core/Box';
import IconButton from '@material-ui/core/IconButton';
import CopyIcon from '@material-ui/icons/FileCopy';
import classNames from 'classnames';
import React, { useRef, useMemo, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import AutoSizer from 'react-virtualized-auto-sizer';
import { FixedSizeList } from 'react-window';
import { AnsiProcessor } from './AnsiProcessor.esm.js';
import { LogLine } from './LogLine.esm.js';
import { LogViewerControls } from './LogViewerControls.esm.js';
import { useStyles, HEADER_SIZE } from './styles.esm.js';
import { useLogViewerSearch } from './useLogViewerSearch.esm.js';
import { useLogViewerSelection } from './useLogViewerSelection.esm.js';

function RealLogViewer(props) {
  const classes = useStyles({ classes: props.classes });
  const listRef = useRef(null);
  const processor = useMemo(() => new AnsiProcessor(), []);
  const lines = processor.process(props.text);
  const search = useLogViewerSearch(lines);
  const selection = useLogViewerSelection(lines);
  const location = useLocation();
  useEffect(() => {
    if (search.resultLine !== void 0 && listRef.current) {
      listRef.current.scrollToItem(search.resultLine - 1, "center");
    }
  }, [search.resultLine]);
  useEffect(() => {
    if (location.hash) {
      const line = parseInt(location.hash.replace(/\D/g, ""), 10);
      selection.setSelection(line, false);
    }
  }, []);
  const handleSelectLine = (line, event) => {
    selection.setSelection(line, event.shiftKey);
  };
  return /* @__PURE__ */ React.createElement(AutoSizer, null, ({ height, width }) => /* @__PURE__ */ React.createElement(Box, { style: { width, height }, className: classes.root }, /* @__PURE__ */ React.createElement(Box, { className: classes.header }, /* @__PURE__ */ React.createElement(LogViewerControls, { ...search })), /* @__PURE__ */ React.createElement(
    FixedSizeList,
    {
      ref: listRef,
      className: classes.log,
      height: (height || 480) - HEADER_SIZE,
      width: width || 640,
      itemData: search.lines,
      itemSize: 20,
      itemCount: search.lines.length
    },
    ({ index, style, data }) => {
      const line = data[index];
      const { lineNumber } = line;
      return /* @__PURE__ */ React.createElement(
        Box,
        {
          style: { ...style },
          className: classNames(classes.line, {
            [classes.lineSelected]: selection.isSelected(lineNumber)
          })
        },
        selection.shouldShowButton(lineNumber) && /* @__PURE__ */ React.createElement(
          IconButton,
          {
            "data-testid": "copy-button",
            size: "small",
            className: classes.lineCopyButton,
            onClick: () => selection.copySelection()
          },
          /* @__PURE__ */ React.createElement(CopyIcon, { fontSize: "inherit" })
        ),
        /* @__PURE__ */ React.createElement(
          "a",
          {
            role: "row",
            target: "_self",
            href: `#line-${lineNumber}`,
            className: classes.lineNumber,
            onClick: (event) => handleSelectLine(lineNumber, event),
            onKeyPress: (event) => handleSelectLine(lineNumber, event)
          },
          lineNumber
        ),
        /* @__PURE__ */ React.createElement(
          LogLine,
          {
            line,
            classes,
            searchText: search.searchText,
            highlightResultIndex: search.resultLine === lineNumber ? search.resultLineIndex : void 0
          }
        )
      );
    }
  )));
}

export { RealLogViewer };
//# sourceMappingURL=RealLogViewer.esm.js.map
