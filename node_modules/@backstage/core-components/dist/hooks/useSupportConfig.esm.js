import { useApiHolder, configApiRef } from '@backstage/core-plugin-api';
import { coreComponentsTranslationRef } from '../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useDefaultSupportConfig = () => {
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  return {
    url: "https://github.com/backstage/backstage/issues",
    items: [
      {
        title: t("supportConfig.default.title"),
        icon: "warning",
        links: [
          {
            // TODO: Update to dedicated support page on backstage.io/docs
            title: t("supportConfig.default.linkTitle"),
            url: "https://github.com/backstage/backstage/blob/master/app-config.yaml"
          }
        ]
      }
    ]
  };
};
function useSupportConfig() {
  const apiHolder = useApiHolder();
  const config = apiHolder.get(configApiRef);
  const supportConfig = config == null ? void 0 : config.getOptionalConfig("app.support");
  const defaultSupportConfig = useDefaultSupportConfig();
  if (!supportConfig) {
    return defaultSupportConfig;
  }
  return {
    url: supportConfig.getString("url"),
    items: supportConfig.getConfigArray("items").flatMap((itemConf) => {
      var _a;
      return {
        title: itemConf.getString("title"),
        icon: itemConf.getOptionalString("icon"),
        links: ((_a = itemConf.getOptionalConfigArray("links")) != null ? _a : []).flatMap(
          (linkConf) => ({
            url: linkConf.getString("url"),
            title: linkConf.getString("title")
          })
        )
      };
    })
  };
}

export { useSupportConfig };
//# sourceMappingURL=useSupportConfig.esm.js.map
