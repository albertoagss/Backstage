import React, { useState, useCallback, useLayoutEffect, useMemo } from 'react';
import { useApi, errorApiRef, useApiHolder } from '@backstage/core-plugin-api';
import { commonProvider } from './commonProvider.esm.js';
import { guestProvider } from './guestProvider.esm.js';
import { customProvider } from './customProvider.esm.js';
import { IdentityApiSignOutProxy } from './IdentityApiSignOutProxy.esm.js';

const PROVIDER_STORAGE_KEY = "@backstage/core:SignInPage:provider";
const signInProviders = {
  guest: guestProvider,
  custom: customProvider,
  common: commonProvider
};
function validateIDs(id, providers) {
  if (id in providers)
    throw new Error(
      `"${id}" ID is duplicated. IDs of identity providers have to be unique.`
    );
}
function getSignInProviders(identityProviders) {
  const providers = identityProviders.reduce(
    (acc, config) => {
      if (typeof config === "string") {
        validateIDs(config, acc);
        acc[config] = { components: signInProviders[config], id: config };
        return acc;
      }
      const { id } = config;
      validateIDs(id, acc);
      acc[id] = { components: signInProviders.common, id, config };
      return acc;
    },
    {}
  );
  return providers;
}
const useSignInProviders = (providers, onSignInSuccess) => {
  const errorApi = useApi(errorApiRef);
  const apiHolder = useApiHolder();
  const [loading, setLoading] = useState(true);
  const handleWrappedResult = useCallback(
    (identityApi) => {
      onSignInSuccess(
        IdentityApiSignOutProxy.from({
          identityApi,
          signOut: async () => {
            var _a;
            localStorage.removeItem(PROVIDER_STORAGE_KEY);
            await ((_a = identityApi.signOut) == null ? void 0 : _a.call(identityApi));
          }
        })
      );
    },
    [onSignInSuccess]
  );
  useLayoutEffect(() => {
    var _a;
    if (!loading) {
      return void 0;
    }
    const selectedProviderId = localStorage.getItem(
      PROVIDER_STORAGE_KEY
    );
    if (selectedProviderId === null) {
      setLoading(false);
      return void 0;
    }
    const provider = providers[selectedProviderId];
    if (!provider) {
      setLoading(false);
      return void 0;
    }
    let didCancel = false;
    provider.components.loader(apiHolder, (_a = provider.config) == null ? void 0 : _a.apiRef).then((result) => {
      if (didCancel) {
        localStorage.removeItem(PROVIDER_STORAGE_KEY);
        return;
      }
      if (result) {
        handleWrappedResult(result);
      } else {
        setLoading(false);
      }
    }).catch((error) => {
      localStorage.removeItem(PROVIDER_STORAGE_KEY);
      if (didCancel) {
        return;
      }
      errorApi.post(error);
      setLoading(false);
    });
    return () => {
      didCancel = true;
    };
  }, [
    loading,
    errorApi,
    onSignInSuccess,
    apiHolder,
    providers,
    handleWrappedResult
  ]);
  const elements = useMemo(
    () => Object.keys(providers).map((key) => {
      const provider = providers[key];
      const { Component } = provider.components;
      const handleSignInSuccess = (result) => {
        handleWrappedResult(result);
      };
      const handleSignInStarted = () => {
        var _a;
        localStorage.setItem(
          PROVIDER_STORAGE_KEY,
          ((_a = provider == null ? void 0 : provider.config) == null ? void 0 : _a.id) || provider.id
        );
      };
      const handleSignInFailure = () => {
        localStorage.removeItem(PROVIDER_STORAGE_KEY);
      };
      return /* @__PURE__ */ React.createElement(
        Component,
        {
          key: provider.id,
          config: provider.config,
          onSignInStarted: handleSignInStarted,
          onSignInSuccess: handleSignInSuccess,
          onSignInFailure: handleSignInFailure
        }
      );
    }),
    [providers, handleWrappedResult]
  );
  return [loading, elements];
};

export { getSignInProviders, useSignInProviders };
//# sourceMappingURL=providers.esm.js.map
