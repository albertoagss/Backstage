import React, { useContext, useState } from 'react';
import { useResolvedPath, useLocation, resolvePath } from 'react-router-dom';
import { makeStyles } from '@material-ui/core/styles';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import { Link } from '../../components/Link/Link.esm.js';
import classNames from 'classnames';
import ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';
import ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';
import { SidebarItemWithSubmenuContext } from './config.esm.js';
import { isLocationMatch } from './utils.esm.js';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';

const useStyles = makeStyles(
  (theme) => {
    var _a, _b;
    return {
      item: {
        height: 48,
        width: "100%",
        "&:hover": {
          background: ((_a = theme.palette.navigation.navItem) == null ? void 0 : _a.hoverBackground) || "#6f6f6f",
          color: theme.palette.navigation.selectedColor
        },
        display: "flex",
        alignItems: "center",
        color: theme.palette.navigation.color,
        padding: theme.spacing(2.5),
        cursor: "pointer",
        position: "relative",
        background: "none",
        border: "none"
      },
      itemContainer: {
        width: "100%"
      },
      selected: {
        background: "#6f6f6f",
        color: theme.palette.common.white
      },
      label: {
        margin: theme.spacing(1.75),
        marginLeft: theme.spacing(1),
        fontSize: theme.typography.body2.fontSize,
        whiteSpace: "nowrap",
        overflow: "hidden",
        "text-overflow": "ellipsis",
        lineHeight: 1
      },
      subtitle: {
        fontSize: 10,
        whiteSpace: "nowrap",
        overflow: "hidden",
        "text-overflow": "ellipsis"
      },
      dropdownArrow: {
        position: "absolute",
        right: 21
      },
      dropdown: {
        display: "flex",
        flexDirection: "column",
        alignItems: "end"
      },
      dropdownItem: {
        width: "100%",
        padding: "10px 0 10px 0",
        "&:hover": {
          background: ((_b = theme.palette.navigation.navItem) == null ? void 0 : _b.hoverBackground) || "#6f6f6f",
          color: theme.palette.navigation.selectedColor
        }
      },
      textContent: {
        color: theme.palette.navigation.color,
        paddingLeft: theme.spacing(4),
        paddingRight: theme.spacing(1),
        fontSize: theme.typography.body2.fontSize,
        whiteSpace: "nowrap",
        overflow: "hidden",
        "text-overflow": "ellipsis"
      }
    };
  },
  { name: "BackstageSidebarSubmenuItem" }
);
const SidebarSubmenuItem = (props) => {
  var _a;
  const { title, subtitle, to, icon: Icon, dropdownItems, exact } = props;
  const classes = useStyles();
  const { setIsHoveredOn } = useContext(SidebarItemWithSubmenuContext);
  const closeSubmenu = () => {
    setIsHoveredOn(false);
  };
  const toLocation = useResolvedPath(to != null ? to : "");
  const currentLocation = useLocation();
  let isActive = isLocationMatch(currentLocation, toLocation, exact);
  const [showDropDown, setShowDropDown] = useState(
    (_a = props.initialShowDropdown) != null ? _a : false
  );
  const handleClickDropdown = () => {
    setShowDropDown(!showDropDown);
  };
  if (dropdownItems !== void 0) {
    dropdownItems.some((item) => {
      const resolvedPath = resolvePath(item.to);
      isActive = isLocationMatch(currentLocation, resolvedPath, exact);
      return isActive;
    });
    return /* @__PURE__ */ React.createElement(Box, { className: classes.itemContainer }, /* @__PURE__ */ React.createElement(Tooltip, { title, enterDelay: 500, enterNextDelay: 500 }, /* @__PURE__ */ React.createElement(
      Button,
      {
        role: "button",
        onClick: handleClickDropdown,
        onTouchStart: (e) => e.stopPropagation(),
        className: classNames(
          classes.item,
          isActive ? classes.selected : void 0
        )
      },
      Icon && /* @__PURE__ */ React.createElement(Icon, { fontSize: "small" }),
      /* @__PURE__ */ React.createElement(
        Typography,
        {
          variant: "subtitle1",
          component: "span",
          className: classes.label
        },
        title,
        /* @__PURE__ */ React.createElement("br", null),
        subtitle && /* @__PURE__ */ React.createElement(
          Typography,
          {
            variant: "caption",
            component: "span",
            className: classes.subtitle
          },
          subtitle
        )
      ),
      showDropDown ? /* @__PURE__ */ React.createElement(ArrowDropUpIcon, { className: classes.dropdownArrow }) : /* @__PURE__ */ React.createElement(ArrowDropDownIcon, { className: classes.dropdownArrow })
    )), dropdownItems && showDropDown && /* @__PURE__ */ React.createElement(Box, { className: classes.dropdown }, dropdownItems.map((object, key) => /* @__PURE__ */ React.createElement(
      Tooltip,
      {
        key,
        title: object.title,
        enterDelay: 500,
        enterNextDelay: 500
      },
      /* @__PURE__ */ React.createElement(
        Link,
        {
          to: object.to,
          underline: "none",
          className: classes.dropdownItem,
          onClick: closeSubmenu,
          onTouchStart: (e) => e.stopPropagation()
        },
        /* @__PURE__ */ React.createElement(Typography, { component: "span", className: classes.textContent }, object.title)
      )
    ))));
  }
  return /* @__PURE__ */ React.createElement(Box, { className: classes.itemContainer }, /* @__PURE__ */ React.createElement(Tooltip, { title, enterDelay: 500, enterNextDelay: 500 }, /* @__PURE__ */ React.createElement(
    Link,
    {
      to,
      underline: "none",
      className: classNames(
        classes.item,
        isActive ? classes.selected : void 0
      ),
      onClick: closeSubmenu,
      onTouchStart: (e) => e.stopPropagation()
    },
    Icon && /* @__PURE__ */ React.createElement(Icon, { fontSize: "small" }),
    /* @__PURE__ */ React.createElement(
      Typography,
      {
        variant: "subtitle1",
        component: "span",
        className: classes.label
      },
      title,
      /* @__PURE__ */ React.createElement("br", null),
      subtitle && /* @__PURE__ */ React.createElement(
        Typography,
        {
          variant: "caption",
          component: "span",
          className: classes.subtitle
        },
        subtitle
      )
    )
  )));
};

export { SidebarSubmenuItem };
//# sourceMappingURL=SidebarSubmenuItem.esm.js.map
