import { ResponseError } from '@backstage/errors';
import qs from 'qs';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class SearchClient {
  constructor(options) {
    __publicField(this, "discoveryApi");
    __publicField(this, "identityApi");
    this.discoveryApi = options.discoveryApi;
    this.identityApi = options.identityApi;
  }
  async query(query) {
    const { token } = await this.identityApi.getCredentials();
    const queryString = qs.stringify(query);
    const url = `${await this.discoveryApi.getBaseUrl(
      "search"
    )}/query?${queryString}`;
    const response = await fetch(url, {
      headers: token ? { Authorization: `Bearer ${token}` } : {}
    });
    if (!response.ok) {
      throw await ResponseError.fromResponse(response);
    }
    return response.json();
  }
}

export { SearchClient };
//# sourceMappingURL=apis.esm.js.map
