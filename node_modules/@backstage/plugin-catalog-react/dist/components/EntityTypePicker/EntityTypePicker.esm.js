import React, { useEffect } from 'react';
import Box from '@material-ui/core/Box';
import { useEntityTypeFilter } from '../../hooks/useEntityTypeFilter.esm.js';
import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import { Select } from '@backstage/core-components';

const EntityTypePicker = (props) => {
  var _a;
  const { hidden, initialFilter } = props;
  const alertApi = useApi(alertApiRef);
  const { error, availableTypes, selectedTypes, setSelectedTypes } = useEntityTypeFilter();
  useEffect(() => {
    if (error) {
      alertApi.post({
        message: `Failed to load entity types`,
        severity: "error"
      });
    }
    if (initialFilter) {
      setSelectedTypes([initialFilter]);
    }
  }, [error, alertApi, initialFilter, setSelectedTypes]);
  if (availableTypes.length === 0 || error)
    return null;
  const items = [
    { value: "all", label: "all" },
    ...availableTypes.map((type) => ({
      value: type,
      label: type
    }))
  ];
  return hidden ? null : /* @__PURE__ */ React.createElement(Box, { pb: 1, pt: 1 }, /* @__PURE__ */ React.createElement(
    Select,
    {
      label: "Type",
      items,
      selected: (_a = items.length > 1 ? selectedTypes[0] : void 0) != null ? _a : "all",
      onChange: (value) => setSelectedTypes(value === "all" ? [] : [String(value)])
    }
  ));
};

export { EntityTypePicker };
//# sourceMappingURL=EntityTypePicker.esm.js.map
