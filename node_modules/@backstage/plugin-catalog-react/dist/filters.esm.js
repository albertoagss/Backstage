import { stringifyEntityRef, parseEntityRef, RELATION_OWNED_BY } from '@backstage/catalog-model';
import { getEntityRelations } from './utils/getEntityRelations.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, key + "" , value);
  return value;
};
class EntityKindFilter {
  constructor(value) {
    this.value = value;
  }
  getCatalogFilters() {
    return { kind: this.value };
  }
  toQueryValue() {
    return this.value;
  }
}
class EntityTypeFilter {
  constructor(value) {
    this.value = value;
  }
  // Simplify `string | string[]` for consumers, always returns an array
  getTypes() {
    return Array.isArray(this.value) ? this.value : [this.value];
  }
  getCatalogFilters() {
    return { "spec.type": this.getTypes() };
  }
  toQueryValue() {
    return this.getTypes();
  }
}
class EntityTagFilter {
  constructor(values) {
    this.values = values;
  }
  filterEntity(entity) {
    return this.values.every((v) => {
      var _a;
      return ((_a = entity.metadata.tags) != null ? _a : []).includes(v);
    });
  }
  getCatalogFilters() {
    return { "metadata.tags": this.values };
  }
  toQueryValue() {
    return this.values;
  }
}
class EntityTextFilter {
  constructor(value) {
    this.value = value;
  }
  filterEntity(entity) {
    const words = this.toUpperArray(this.value.split(/\s/));
    const exactMatch = this.toUpperArray([entity.metadata.tags]);
    const partialMatch = this.toUpperArray([
      entity.metadata.name,
      entity.metadata.title
    ]);
    for (const word of words) {
      if (exactMatch.every((m) => m !== word) && partialMatch.every((m) => !m.includes(word))) {
        return false;
      }
    }
    return true;
  }
  getFullTextFilters() {
    return {
      term: this.value,
      // Update this to be more dynamic based on table columns.
      fields: ["metadata.name", "metadata.title", "spec.profile.displayName"]
    };
  }
  toQueryValue() {
    return this.value;
  }
  toUpperArray(value) {
    return value.flat().filter((m) => Boolean(m)).map((m) => m.toLocaleUpperCase("en-US"));
  }
}
class EntityOwnerFilter {
  constructor(values) {
    __publicField(this, "values");
    this.values = values.reduce((fullRefs, ref) => {
      try {
        fullRefs.push(
          stringifyEntityRef(parseEntityRef(ref, { defaultKind: "Group" }))
        );
        return fullRefs;
      } catch (err) {
        return fullRefs;
      }
    }, []);
  }
  getCatalogFilters() {
    return { "relations.ownedBy": this.values };
  }
  filterEntity(entity) {
    return this.values.some(
      (v) => getEntityRelations(entity, RELATION_OWNED_BY).some(
        (o) => stringifyEntityRef(o) === v
      )
    );
  }
  /**
   * Get the URL query parameter value. May be a mix of full and humanized entity refs.
   * @returns list of entity refs.
   */
  toQueryValue() {
    return this.values;
  }
}
class EntityLifecycleFilter {
  constructor(values) {
    this.values = values;
  }
  getCatalogFilters() {
    return { "spec.lifecycle": this.values };
  }
  filterEntity(entity) {
    return this.values.some((v) => {
      var _a;
      return ((_a = entity.spec) == null ? void 0 : _a.lifecycle) === v;
    });
  }
  toQueryValue() {
    return this.values;
  }
}
class EntityNamespaceFilter {
  constructor(values) {
    this.values = values;
  }
  getCatalogFilters() {
    return { "metadata.namespace": this.values };
  }
  filterEntity(entity) {
    return this.values.some((v) => entity.metadata.namespace === v);
  }
  toQueryValue() {
    return this.values;
  }
}
class EntityUserFilter {
  constructor(value, refs) {
    this.value = value;
    this.refs = refs;
  }
  static owned(ownershipEntityRefs) {
    return new EntityUserFilter("owned", ownershipEntityRefs);
  }
  static all() {
    return new EntityUserFilter("all");
  }
  static starred(starredEntityRefs) {
    return new EntityUserFilter("starred", starredEntityRefs);
  }
  getCatalogFilters() {
    var _a, _b, _c;
    if (this.value === "owned") {
      return { "relations.ownedBy": (_a = this.refs) != null ? _a : [] };
    }
    if (this.value === "starred") {
      return {
        "metadata.name": (_c = (_b = this.refs) == null ? void 0 : _b.map((e) => parseEntityRef(e).name)) != null ? _c : []
      };
    }
    return {};
  }
  filterEntity(entity) {
    var _a, _b, _c, _d;
    if (this.value === "starred") {
      return (_b = (_a = this.refs) == null ? void 0 : _a.includes(stringifyEntityRef(entity))) != null ? _b : true;
    }
    if (this.value === "owned") {
      const relations = getEntityRelations(entity, RELATION_OWNED_BY);
      return (_d = (_c = this.refs) == null ? void 0 : _c.some(
        (v) => relations.some((o) => stringifyEntityRef(o) === v)
      )) != null ? _d : false;
    }
    return true;
  }
  toQueryValue() {
    return this.value;
  }
}
class UserListFilter {
  constructor(value, isOwnedEntity, isStarredEntity) {
    this.value = value;
    this.isOwnedEntity = isOwnedEntity;
    this.isStarredEntity = isStarredEntity;
  }
  filterEntity(entity) {
    switch (this.value) {
      case "owned":
        return this.isOwnedEntity(entity);
      case "starred":
        return this.isStarredEntity(entity);
      default:
        return true;
    }
  }
  toQueryValue() {
    return this.value;
  }
}
class EntityOrphanFilter {
  constructor(value) {
    this.value = value;
  }
  getCatalogFilters() {
    if (this.value) {
      return { "metadata.annotations.backstage.io/orphan": String(this.value) };
    }
    return {};
  }
  filterEntity(entity) {
    var _a;
    const orphan = (_a = entity.metadata.annotations) == null ? void 0 : _a["backstage.io/orphan"];
    return orphan !== void 0 && this.value.toString() === orphan;
  }
}
class EntityErrorFilter {
  constructor(value) {
    this.value = value;
  }
  filterEntity(entity) {
    var _a, _b;
    const error = ((_b = (_a = entity == null ? void 0 : entity.status) == null ? void 0 : _a.items) == null ? void 0 : _b.length) > 0;
    return error !== void 0 && this.value === error;
  }
}

export { EntityErrorFilter, EntityKindFilter, EntityLifecycleFilter, EntityNamespaceFilter, EntityOrphanFilter, EntityOwnerFilter, EntityTagFilter, EntityTextFilter, EntityTypeFilter, EntityUserFilter, UserListFilter };
//# sourceMappingURL=filters.esm.js.map
