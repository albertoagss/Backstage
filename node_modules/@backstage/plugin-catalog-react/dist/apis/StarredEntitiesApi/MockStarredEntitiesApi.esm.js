import ObservableImpl from 'zen-observable';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class MockStarredEntitiesApi {
  constructor() {
    __publicField(this, "starredEntities", /* @__PURE__ */ new Set());
    __publicField(this, "subscribers", /* @__PURE__ */ new Set());
    __publicField(this, "observable", new ObservableImpl((subscriber) => {
      subscriber.next(new Set(this.starredEntities));
      this.subscribers.add(subscriber);
      return () => {
        this.subscribers.delete(subscriber);
      };
    }));
  }
  async toggleStarred(entityRef) {
    if (!this.starredEntities.delete(entityRef)) {
      this.starredEntities.add(entityRef);
    }
    for (const subscription of this.subscribers) {
      subscription.next(new Set(this.starredEntities));
    }
  }
  starredEntitie$() {
    return this.observable;
  }
}

export { MockStarredEntitiesApi };
//# sourceMappingURL=MockStarredEntitiesApi.esm.js.map
