import React, { useState, useCallback, useMemo } from 'react';
import { EntityListContext } from '../hooks/useEntityListProvider.esm.js';

function MockEntityListContextProvider(props) {
  var _a;
  const { children, value } = props;
  const [filters, setFilters] = useState((_a = value == null ? void 0 : value.filters) != null ? _a : {});
  const updateFilters = useCallback(
    (update) => {
      setFilters((prevFilters) => {
        const newFilters = typeof update === "function" ? update(prevFilters) : update;
        return { ...prevFilters, ...newFilters };
      });
    },
    []
  );
  const defaultValues = useMemo(
    () => ({
      entities: [],
      backendEntities: [],
      queryParameters: {}
    }),
    []
  );
  const resolvedValue = useMemo(
    () => {
      var _a2, _b, _c, _d, _e, _f, _g;
      return {
        entities: (_a2 = value == null ? void 0 : value.entities) != null ? _a2 : defaultValues.entities,
        backendEntities: (_b = value == null ? void 0 : value.backendEntities) != null ? _b : defaultValues.backendEntities,
        updateFilters: (_c = value == null ? void 0 : value.updateFilters) != null ? _c : updateFilters,
        filters,
        loading: (_d = value == null ? void 0 : value.loading) != null ? _d : false,
        queryParameters: (_e = value == null ? void 0 : value.queryParameters) != null ? _e : defaultValues.queryParameters,
        error: value == null ? void 0 : value.error,
        totalItems: (_g = value == null ? void 0 : value.totalItems) != null ? _g : ((_f = value == null ? void 0 : value.entities) != null ? _f : defaultValues.entities).length
      };
    },
    [value, defaultValues, filters, updateFilters]
  );
  return /* @__PURE__ */ React.createElement(EntityListContext.Provider, { value: resolvedValue }, children);
}

export { MockEntityListContextProvider };
//# sourceMappingURL=providers.esm.js.map
