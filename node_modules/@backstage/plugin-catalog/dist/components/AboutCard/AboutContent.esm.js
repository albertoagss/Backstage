import { RELATION_PART_OF, RELATION_OWNED_BY, getEntitySourceLocation } from '@backstage/catalog-model';
import { getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import Chip from '@material-ui/core/Chip';
import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import { MarkdownContent } from '@backstage/core-components';
import React from 'react';
import { AboutField } from './AboutField.esm.js';
import { LinksGridList } from '../EntityLinksCard/LinksGridList.esm.js';

const useStyles = makeStyles({
  description: {
    wordBreak: "break-word"
  }
});
function getLocationTargetHref(target, type, entitySourceLocation) {
  if (type === "url" || target.includes("://")) {
    return target;
  }
  const srcLocationUrl = entitySourceLocation.type === "file" ? `file://${entitySourceLocation.target}` : entitySourceLocation.target;
  if (type === "file" || entitySourceLocation.type === "file") {
    return new URL(target, srcLocationUrl).href;
  }
  return srcLocationUrl;
}
function AboutContent(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const { entity } = props;
  const classes = useStyles();
  const isSystem = entity.kind.toLocaleLowerCase("en-US") === "system";
  const isResource = entity.kind.toLocaleLowerCase("en-US") === "resource";
  const isComponent = entity.kind.toLocaleLowerCase("en-US") === "component";
  const isAPI = entity.kind.toLocaleLowerCase("en-US") === "api";
  const isTemplate = entity.kind.toLocaleLowerCase("en-US") === "template";
  const isLocation = entity.kind.toLocaleLowerCase("en-US") === "location";
  const isGroup = entity.kind.toLocaleLowerCase("en-US") === "group";
  const partOfSystemRelations = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "system"
  });
  const partOfComponentRelations = getEntityRelations(
    entity,
    RELATION_PART_OF,
    {
      kind: "component"
    }
  );
  const partOfDomainRelations = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "domain"
  });
  const ownedByRelations = getEntityRelations(entity, RELATION_OWNED_BY);
  let entitySourceLocation;
  try {
    entitySourceLocation = getEntitySourceLocation(entity);
  } catch (e) {
    entitySourceLocation = void 0;
  }
  return /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(AboutField, { label: "Description", gridSizes: { xs: 12 } }, /* @__PURE__ */ React.createElement(
    MarkdownContent,
    {
      className: classes.description,
      content: ((_a = entity == null ? void 0 : entity.metadata) == null ? void 0 : _a.description) || "No description"
    }
  )), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Owner",
      value: "No Owner",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    ownedByRelations.length > 0 && /* @__PURE__ */ React.createElement(EntityRefLinks, { entityRefs: ownedByRelations, defaultKind: "group" })
  ), (isSystem || partOfDomainRelations.length > 0) && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Domain",
      value: "No Domain",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    partOfDomainRelations.length > 0 && /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfDomainRelations,
        defaultKind: "domain"
      }
    )
  ), (isAPI || isComponent || isResource || partOfSystemRelations.length > 0) && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "System",
      value: "No System",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    partOfSystemRelations.length > 0 && /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfSystemRelations,
        defaultKind: "system"
      }
    )
  ), isComponent && partOfComponentRelations.length > 0 && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Parent Component",
      value: "No Parent Component",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfComponentRelations,
        defaultKind: "component"
      }
    )
  ), (isAPI || isComponent || isResource || isTemplate || isGroup || isLocation || typeof ((_b = entity == null ? void 0 : entity.spec) == null ? void 0 : _b.type) === "string") && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Type",
      value: (_c = entity == null ? void 0 : entity.spec) == null ? void 0 : _c.type,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), (isAPI || isComponent || typeof ((_d = entity == null ? void 0 : entity.spec) == null ? void 0 : _d.lifecycle) === "string") && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Lifecycle",
      value: (_e = entity == null ? void 0 : entity.spec) == null ? void 0 : _e.lifecycle,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: "Tags",
      value: "No Tags",
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    (((_f = entity == null ? void 0 : entity.metadata) == null ? void 0 : _f.tags) || []).map((t) => /* @__PURE__ */ React.createElement(Chip, { key: t, size: "small", label: t }))
  ), isLocation && (((_g = entity == null ? void 0 : entity.spec) == null ? void 0 : _g.targets) || ((_h = entity == null ? void 0 : entity.spec) == null ? void 0 : _h.target)) && /* @__PURE__ */ React.createElement(AboutField, { label: "Targets", gridSizes: { xs: 12 } }, /* @__PURE__ */ React.createElement(
    LinksGridList,
    {
      cols: 1,
      items: (entity.spec.targets || [entity.spec.target]).map((target) => target).map((target) => {
        var _a2;
        return {
          text: target,
          href: getLocationTargetHref(
            target,
            ((_a2 = entity == null ? void 0 : entity.spec) == null ? void 0 : _a2.type) || "unknown",
            entitySourceLocation
          )
        };
      })
    }
  )));
}

export { AboutContent };
//# sourceMappingURL=AboutContent.esm.js.map
