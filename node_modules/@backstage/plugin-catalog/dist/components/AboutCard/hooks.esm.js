import { parseEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import useAsync from 'react-use/lib/useAsync';

const SOURCE_TEMPLATE_ANNOTATION = "backstage.io/source-template";
const useSourceTemplateCompoundEntityRef = (entity) => {
  const catalogApi = useApi(catalogApiRef);
  const { value: sourceTemplateRef } = useAsync(async () => {
    var _a;
    const refCandidate = (_a = entity.metadata.annotations) == null ? void 0 : _a[SOURCE_TEMPLATE_ANNOTATION];
    let compoundRefCandidate;
    if (!refCandidate) {
      return void 0;
    }
    try {
      const template = await catalogApi.getEntityByRef(refCandidate);
      compoundRefCandidate = parseEntityRef(refCandidate);
      return template !== void 0 ? compoundRefCandidate : void 0;
    } catch {
      return void 0;
    }
  }, [catalogApi, entity]);
  return sourceTemplateRef;
};

export { useSourceTemplateCompoundEntityRef };
//# sourceMappingURL=hooks.esm.js.map
