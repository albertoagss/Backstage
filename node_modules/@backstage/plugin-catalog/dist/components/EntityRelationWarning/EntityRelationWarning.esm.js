import { catalogApiRef, useEntity } from '@backstage/plugin-catalog-react';
import Alert from '@material-ui/lab/Alert';
import React from 'react';
import useAsync from 'react-use/esm/useAsync';
import Box from '@material-ui/core/Box';
import { ResponseErrorPanel } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';

async function getRelationWarnings(entity, catalogApi) {
  var _a;
  const entityRefRelations = (_a = entity.relations) == null ? void 0 : _a.map(
    (relation) => relation.targetRef
  );
  if (!entityRefRelations || (entityRefRelations == null ? void 0 : entityRefRelations.length) < 1 || entityRefRelations.length > 1e3) {
    return [];
  }
  const relatedEntities = await catalogApi.getEntitiesByRefs({
    entityRefs: entityRefRelations,
    fields: ["kind", "metadata.name", "metadata.namespace"]
  });
  return entityRefRelations.filter(
    (_, index) => relatedEntities.items[index] === void 0
  );
}
async function hasRelationWarnings(entity, context) {
  const catalogApi = context.apis.get(catalogApiRef);
  if (!catalogApi) {
    throw new Error(`No implementation available for ${catalogApiRef}`);
  }
  const relatedEntitiesMissing = await getRelationWarnings(entity, catalogApi);
  return relatedEntitiesMissing.length > 0;
}
function EntityRelationWarning() {
  const { entity } = useEntity();
  const catalogApi = useApi(catalogApiRef);
  const { loading, error, value } = useAsync(async () => {
    return getRelationWarnings(entity, catalogApi);
  }, [entity, catalogApi]);
  if (error) {
    return /* @__PURE__ */ React.createElement(Box, { mb: 1 }, /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error }));
  }
  if (loading || !value || value.length === 0) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Alert, { severity: "warning" }, "This entity has relations to other entities, which can't be found in the catalog. ", /* @__PURE__ */ React.createElement("br", null), "Entities not found are: ", value.join(", ")));
}

export { EntityRelationWarning, hasRelationWarnings };
//# sourceMappingURL=EntityRelationWarning.esm.js.map
