import { RELATION_PART_OF, RELATION_OWNED_BY, stringifyEntityRef, ANNOTATION_VIEW_URL, ANNOTATION_EDIT_URL } from '@backstage/catalog-model';
import { WarningPanel, CodeSnippet, Table } from '@backstage/core-components';
import { useStarredEntities, useEntityList, getEntityRelations, humanizeEntityRef } from '@backstage/plugin-catalog-react';
import Typography from '@material-ui/core/Typography';
import { withStyles } from '@material-ui/core/styles';
import { visuallyHidden } from '@mui/utils';
import EditIcon from '@material-ui/icons/Edit';
import OpenInNew from '@material-ui/icons/OpenInNew';
import Star from '@material-ui/icons/Star';
import StarBorder from '@material-ui/icons/StarBorder';
import { capitalize } from 'lodash';
import pluralize from 'pluralize';
import React, { useMemo } from 'react';
import { columnFactories } from './columns.esm.js';
import { PaginatedCatalogTable } from './PaginatedCatalogTable.esm.js';
import { defaultCatalogTableColumnsFunc } from './defaultCatalogTableColumnsFunc.esm.js';

const YellowStar = withStyles({
  root: {
    color: "#f3ba37"
  }
})(Star);
const refCompare = (a, b) => {
  const toRef = (entity) => entity.metadata.title || humanizeEntityRef(entity, {
    defaultKind: "Component"
  });
  return toRef(a).localeCompare(toRef(b));
};
const CatalogTable = (props) => {
  var _a, _b, _c, _d;
  const {
    columns = defaultCatalogTableColumnsFunc,
    tableOptions,
    subtitle,
    emptyContent
  } = props;
  const { isStarredEntity, toggleStarredEntity } = useStarredEntities();
  const entityListContext = useEntityList();
  const { loading, error, entities, filters, pageInfo, totalItems } = entityListContext;
  const enablePagination = !!pageInfo;
  const tableColumns = useMemo(
    () => typeof columns === "function" ? columns(entityListContext) : columns,
    [columns, entityListContext]
  );
  if (error) {
    return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not fetch catalog entities."
      },
      /* @__PURE__ */ React.createElement(CodeSnippet, { language: "text", text: error.toString() })
    ));
  }
  const defaultActions = [
    ({ entity }) => {
      var _a2;
      const url = (_a2 = entity.metadata.annotations) == null ? void 0 : _a2[ANNOTATION_VIEW_URL];
      const title2 = "View";
      return {
        icon: () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { style: visuallyHidden }, title2), /* @__PURE__ */ React.createElement(OpenInNew, { fontSize: "small" })),
        tooltip: title2,
        disabled: !url,
        onClick: () => {
          if (!url)
            return;
          window.open(url, "_blank");
        }
      };
    },
    ({ entity }) => {
      var _a2;
      const url = (_a2 = entity.metadata.annotations) == null ? void 0 : _a2[ANNOTATION_EDIT_URL];
      const title2 = "Edit";
      return {
        icon: () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { style: visuallyHidden }, title2), /* @__PURE__ */ React.createElement(EditIcon, { fontSize: "small" })),
        tooltip: title2,
        disabled: !url,
        onClick: () => {
          if (!url)
            return;
          window.open(url, "_blank");
        }
      };
    },
    ({ entity }) => {
      const isStarred = isStarredEntity(entity);
      const title2 = isStarred ? "Remove from favorites" : "Add to favorites";
      return {
        cellStyle: { paddingLeft: "1em" },
        icon: () => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { style: visuallyHidden }, title2), isStarred ? /* @__PURE__ */ React.createElement(YellowStar, null) : /* @__PURE__ */ React.createElement(StarBorder, null)),
        tooltip: title2,
        onClick: () => toggleStarredEntity(entity)
      };
    }
  ];
  const currentKind = ((_a = filters.kind) == null ? void 0 : _a.value) || "";
  const currentType = ((_b = filters.type) == null ? void 0 : _b.value) || "";
  const currentCount = typeof totalItems === "number" ? `(${totalItems})` : "";
  const titlePreamble = capitalize((_d = (_c = filters.user) == null ? void 0 : _c.value) != null ? _d : "all");
  const title = [
    titlePreamble,
    currentType,
    pluralize(currentKind),
    currentCount
  ].filter((s) => s).join(" ");
  const actions = props.actions || defaultActions;
  const options = {
    actionsColumnIndex: -1,
    loadingType: "linear",
    showEmptyDataSourceMessage: !loading,
    padding: "dense",
    ...tableOptions
  };
  if (enablePagination) {
    return /* @__PURE__ */ React.createElement(
      PaginatedCatalogTable,
      {
        columns: tableColumns,
        emptyContent,
        isLoading: loading,
        title,
        actions,
        subtitle,
        options,
        data: entities.map(toEntityRow),
        next: pageInfo.next,
        prev: pageInfo.prev
      }
    );
  }
  const rows = entities.sort(refCompare).map(toEntityRow);
  const pageSize = 20;
  const showPagination = rows.length > pageSize;
  return /* @__PURE__ */ React.createElement(
    Table,
    {
      isLoading: loading,
      columns: tableColumns,
      options: {
        paging: showPagination,
        pageSize,
        pageSizeOptions: [20, 50, 100],
        ...options
      },
      title,
      data: rows,
      actions,
      subtitle,
      emptyContent
    }
  );
};
CatalogTable.columns = columnFactories;
CatalogTable.defaultColumnsFunc = defaultCatalogTableColumnsFunc;
function toEntityRow(entity) {
  const partOfSystemRelations = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "system"
  });
  const ownedByRelations = getEntityRelations(entity, RELATION_OWNED_BY);
  return {
    entity,
    resolved: {
      // This name is here for backwards compatibility mostly; the
      // presentation of refs in the table should in general be handled with
      // EntityRefLink / EntityName components
      name: humanizeEntityRef(entity, {
        defaultKind: "Component"
      }),
      entityRef: stringifyEntityRef(entity),
      ownedByRelationsTitle: ownedByRelations.map((r) => humanizeEntityRef(r, { defaultKind: "group" })).join(", "),
      ownedByRelations,
      partOfSystemRelationTitle: partOfSystemRelations.map(
        (r) => humanizeEntityRef(r, {
          defaultKind: "system"
        })
      ).join(", "),
      partOfSystemRelations
    }
  };
}

export { CatalogTable };
//# sourceMappingURL=CatalogTable.esm.js.map
