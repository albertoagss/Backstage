{"version":3,"file":"columns.esm.js","sources":["../../../src/components/CatalogTable/columns.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport {\n  humanizeEntityRef,\n  EntityRefLink,\n  EntityRefLinks,\n} from '@backstage/plugin-catalog-react';\nimport Chip from '@material-ui/core/Chip';\nimport { CatalogTableRow } from './types';\nimport { OverflowTooltip, TableColumn } from '@backstage/core-components';\nimport { Entity } from '@backstage/catalog-model';\nimport { JsonArray } from '@backstage/types';\n\n// The columnFactories symbol is not directly exported, but through the\n// CatalogTable.columns field.\n/** @public */\nexport const columnFactories = Object.freeze({\n  createNameColumn(options?: {\n    defaultKind?: string;\n  }): TableColumn<CatalogTableRow> {\n    function formatContent(entity: Entity): string {\n      return (\n        entity.metadata?.title ||\n        humanizeEntityRef(entity, {\n          defaultKind: options?.defaultKind,\n        })\n      );\n    }\n\n    return {\n      title: 'Name',\n      field: 'resolved.entityRef',\n      highlight: true,\n      customSort({ entity: entity1 }, { entity: entity2 }) {\n        // TODO: We could implement this more efficiently by comparing field by field.\n        // This has similar issues as above.\n        return formatContent(entity1).localeCompare(formatContent(entity2));\n      },\n      render: ({ entity }) => (\n        <EntityRefLink\n          entityRef={entity}\n          defaultKind={options?.defaultKind || 'Component'}\n        />\n      ),\n    };\n  },\n  createSystemColumn(): TableColumn<CatalogTableRow> {\n    return {\n      title: 'System',\n      field: 'resolved.partOfSystemRelationTitle',\n      render: ({ resolved }) => (\n        <EntityRefLinks\n          entityRefs={resolved.partOfSystemRelations}\n          defaultKind=\"system\"\n        />\n      ),\n    };\n  },\n  createOwnerColumn(): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Owner',\n      field: 'resolved.ownedByRelationsTitle',\n      render: ({ resolved }) => (\n        <EntityRefLinks\n          entityRefs={resolved.ownedByRelations}\n          defaultKind=\"group\"\n        />\n      ),\n    };\n  },\n  createSpecTargetsColumn(): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Targets',\n      field: 'entity.spec.targets',\n      customFilterAndSearch: (query, row) => {\n        let targets: JsonArray = [];\n        if (\n          row.entity?.spec?.targets &&\n          Array.isArray(row.entity?.spec?.targets)\n        ) {\n          targets = row.entity?.spec?.targets;\n        } else if (row.entity?.spec?.target) {\n          targets = [row.entity?.spec?.target];\n        }\n        return targets\n          .join(', ')\n          .toLocaleUpperCase('en-US')\n          .includes(query.toLocaleUpperCase('en-US'));\n      },\n      render: ({ entity }) => (\n        <>\n          {(entity?.spec?.targets || entity?.spec?.target) && (\n            <OverflowTooltip\n              text={(\n                (entity!.spec!.targets as JsonArray) || [entity.spec.target]\n              ).join(', ')}\n              placement=\"bottom-start\"\n            />\n          )}\n        </>\n      ),\n    };\n  },\n  createSpecTypeColumn(\n    options: {\n      hidden: boolean;\n    } = { hidden: false },\n  ): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Type',\n      field: 'entity.spec.type',\n      hidden: options.hidden,\n      width: 'auto',\n    };\n  },\n  createSpecLifecycleColumn(): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Lifecycle',\n      field: 'entity.spec.lifecycle',\n    };\n  },\n  createMetadataDescriptionColumn(): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Description',\n      field: 'entity.metadata.description',\n      render: ({ entity }) => (\n        <OverflowTooltip\n          text={entity.metadata.description}\n          placement=\"bottom-start\"\n        />\n      ),\n      width: 'auto',\n    };\n  },\n  createTagsColumn(): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Tags',\n      field: 'entity.metadata.tags',\n      cellStyle: {\n        padding: '0px 16px 0px 20px',\n      },\n      render: ({ entity }) => (\n        <>\n          {entity.metadata.tags &&\n            entity.metadata.tags.map(t => (\n              <Chip\n                key={t}\n                label={t}\n                size=\"small\"\n                variant=\"outlined\"\n                style={{ marginBottom: '0px' }}\n              />\n            ))}\n        </>\n      ),\n      width: 'auto',\n    };\n  },\n  createTitleColumn(options?: {\n    hidden?: boolean;\n  }): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Title',\n      field: 'entity.metadata.title',\n      hidden: options?.hidden,\n      searchable: true,\n    };\n  },\n  createLabelColumn(\n    key: string,\n    options?: { title?: string; defaultValue?: string },\n  ): TableColumn<CatalogTableRow> {\n    function formatContent(keyLabel: string, entity: Entity): string {\n      const labels: Record<string, string> | undefined =\n        entity.metadata?.labels;\n      return (labels && labels[keyLabel]) || '';\n    }\n\n    return {\n      title: options?.title || 'Label',\n      field: 'entity.metadata.labels',\n      cellStyle: {\n        padding: '0px 16px 0px 20px',\n      },\n      customSort({ entity: entity1 }, { entity: entity2 }) {\n        return formatContent(key, entity1).localeCompare(\n          formatContent(key, entity2),\n        );\n      },\n      render: ({ entity }: { entity: Entity }) => {\n        const labels: Record<string, string> | undefined =\n          entity.metadata?.labels;\n        const specifiedLabelValue =\n          (labels && labels[key]) || options?.defaultValue;\n        return (\n          <>\n            {specifiedLabelValue && (\n              <Chip\n                key={specifiedLabelValue}\n                label={specifiedLabelValue}\n                size=\"small\"\n                variant=\"outlined\"\n              />\n            )}\n          </>\n        );\n      },\n      width: 'auto',\n    };\n  },\n  createNamespaceColumn(): TableColumn<CatalogTableRow> {\n    return {\n      title: 'Namespace',\n      field: 'entity.metadata.namespace',\n      width: 'auto',\n    };\n  },\n});\n"],"names":[],"mappings":"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"}