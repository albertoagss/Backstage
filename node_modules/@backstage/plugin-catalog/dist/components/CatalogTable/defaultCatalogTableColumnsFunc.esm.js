import { columnFactories } from './columns.esm.js';

const defaultCatalogTableColumnsFunc = ({
  filters,
  entities
}) => {
  var _a;
  const showTypeColumn = filters.type === void 0;
  return [
    columnFactories.createTitleColumn({ hidden: true }),
    columnFactories.createNameColumn({ defaultKind: (_a = filters.kind) == null ? void 0 : _a.value }),
    ...createEntitySpecificColumns(),
    columnFactories.createMetadataDescriptionColumn(),
    columnFactories.createTagsColumn()
  ];
  function createEntitySpecificColumns() {
    var _a2;
    const baseColumns = [
      columnFactories.createSystemColumn(),
      columnFactories.createOwnerColumn(),
      columnFactories.createSpecTypeColumn({ hidden: !showTypeColumn }),
      columnFactories.createSpecLifecycleColumn()
    ];
    switch ((_a2 = filters.kind) == null ? void 0 : _a2.value) {
      case "user":
        return [];
      case "domain":
      case "system":
        return [columnFactories.createOwnerColumn()];
      case "group":
      case "template":
        return [
          columnFactories.createSpecTypeColumn({ hidden: !showTypeColumn })
        ];
      case "location":
        return [
          columnFactories.createSpecTypeColumn({ hidden: !showTypeColumn }),
          columnFactories.createSpecTargetsColumn()
        ];
      default:
        return entities.every((entity) => entity.metadata.namespace === "default") ? baseColumns : [...baseColumns, columnFactories.createNamespaceColumn()];
    }
  }
};

export { defaultCatalogTableColumnsFunc };
//# sourceMappingURL=defaultCatalogTableColumnsFunc.esm.js.map
