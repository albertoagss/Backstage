import ObservableImpl from 'zen-observable';
import { performMigrationToTheNewBucket } from './migration.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class DefaultStarredEntitiesApi {
  constructor(opts) {
    __publicField(this, "settingsStore");
    __publicField(this, "starredEntities");
    __publicField(this, "subscribers", /* @__PURE__ */ new Set());
    __publicField(this, "observable", new ObservableImpl((subscriber) => {
      subscriber.next(new Set(this.starredEntities));
      this.subscribers.add(subscriber);
      return () => {
        this.subscribers.delete(subscriber);
      };
    }));
    var _a;
    performMigrationToTheNewBucket(opts).then();
    this.settingsStore = opts.storageApi.forBucket("starredEntities");
    this.starredEntities = new Set(
      (_a = this.settingsStore.snapshot("entityRefs").value) != null ? _a : []
    );
    this.settingsStore.observe$("entityRefs").subscribe({
      next: (next) => {
        var _a2;
        this.starredEntities = new Set((_a2 = next.value) != null ? _a2 : []);
        this.notifyChanges();
      }
    });
  }
  async toggleStarred(entityRef) {
    if (this.starredEntities.has(entityRef)) {
      this.starredEntities.delete(entityRef);
    } else {
      this.starredEntities.add(entityRef);
    }
    await this.settingsStore.set(
      "entityRefs",
      Array.from(this.starredEntities)
    );
  }
  starredEntitie$() {
    return this.observable;
  }
  notifyChanges() {
    for (const subscription of this.subscribers) {
      subscription.next(new Set(this.starredEntities));
    }
  }
}

export { DefaultStarredEntitiesApi };
//# sourceMappingURL=DefaultStarredEntitiesApi.esm.js.map
