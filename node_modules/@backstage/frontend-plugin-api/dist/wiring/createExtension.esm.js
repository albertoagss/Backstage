function toInternalExtensionDefinition(overrides) {
  const internal = overrides;
  if (internal.$$type !== "@backstage/ExtensionDefinition") {
    throw new Error(
      `Invalid extension definition instance, bad type '${internal.$$type}'`
    );
  }
  if (internal.version !== "v1") {
    throw new Error(
      `Invalid extension definition instance, bad version '${internal.version}'`
    );
  }
  return internal;
}
function createExtension(options) {
  var _a, _b;
  return {
    $$type: "@backstage/ExtensionDefinition",
    version: "v1",
    kind: options.kind,
    namespace: options.namespace,
    name: options.name,
    attachTo: options.attachTo,
    disabled: (_a = options.disabled) != null ? _a : false,
    inputs: (_b = options.inputs) != null ? _b : {},
    output: options.output,
    configSchema: options.configSchema,
    factory({ inputs, ...rest }) {
      return options.factory({
        inputs,
        ...rest
      });
    },
    toString() {
      const parts = [];
      if (options.kind) {
        parts.push(`kind=${options.kind}`);
      }
      if (options.namespace) {
        parts.push(`namespace=${options.namespace}`);
      }
      if (options.name) {
        parts.push(`name=${options.name}`);
      }
      parts.push(`attachTo=${options.attachTo.id}@${options.attachTo.input}`);
      return `ExtensionDefinition{${parts.join(",")}}`;
    }
  };
}

export { createExtension, toInternalExtensionDefinition };
//# sourceMappingURL=createExtension.esm.js.map
