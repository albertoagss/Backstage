{"version":3,"file":"RouteRef.esm.js","sources":["../../src/routing/RouteRef.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { describeParentCallSite } from './describeParentCallSite';\nimport { AnyRouteRefParams } from './types';\n\n/**\n * Absolute route reference.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport interface RouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> {\n  readonly $$type: '@backstage/RouteRef';\n  readonly T: TParams;\n}\n\n/** @internal */\nexport interface InternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> extends RouteRef<TParams> {\n  readonly version: 'v1';\n  getParams(): string[];\n  getDescription(): string;\n\n  setId(id: string): void;\n}\n\n/** @internal */\nexport function toInternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n>(resource: RouteRef<TParams>): InternalRouteRef<TParams> {\n  const r = resource as InternalRouteRef<TParams>;\n  if (r.$$type !== '@backstage/RouteRef') {\n    throw new Error(`Invalid RouteRef, bad type '${r.$$type}'`);\n  }\n\n  return r;\n}\n\n/** @internal */\nexport function isRouteRef(opaque: { $$type: string }): opaque is RouteRef {\n  return opaque.$$type === '@backstage/RouteRef';\n}\n\n/** @internal */\nexport class RouteRefImpl implements InternalRouteRef {\n  readonly $$type = '@backstage/RouteRef';\n  readonly version = 'v1';\n  declare readonly T: never;\n\n  #id?: string;\n  #params: string[];\n  #creationSite: string;\n\n  constructor(readonly params: string[] = [], creationSite: string) {\n    this.#params = params;\n    this.#creationSite = creationSite;\n  }\n\n  getParams(): string[] {\n    return this.#params;\n  }\n\n  getDescription(): string {\n    if (this.#id) {\n      return this.#id;\n    }\n    return `created at '${this.#creationSite}'`;\n  }\n\n  get #name() {\n    return this.$$type.slice('@backstage/'.length);\n  }\n\n  setId(id: string): void {\n    if (!id) {\n      throw new Error(`${this.#name} id must be a non-empty string`);\n    }\n    if (this.#id) {\n      throw new Error(\n        `${this.#name} was referenced twice as both '${this.#id}' and '${id}'`,\n      );\n    }\n    this.#id = id;\n  }\n\n  toString(): string {\n    return `${this.#name}{${this.getDescription()}}`;\n  }\n}\n\n/**\n * Create a {@link RouteRef} from a route descriptor.\n *\n * @param config - Description of the route reference to be created.\n * @public\n */\nexport function createRouteRef<\n  // Params is the type that we care about and the one to be embedded in the route ref.\n  // For example, given the params ['name', 'kind'], Params will be {name: string, kind: string}\n  TParams extends { [param in TParamKeys]: string } | undefined = undefined,\n  TParamKeys extends string = string,\n>(config?: {\n  /** A list of parameter names that the path that this route ref is bound to must contain */\n  readonly params: string extends TParamKeys ? (keyof TParams)[] : TParamKeys[];\n}): RouteRef<\n  keyof TParams extends never\n    ? undefined\n    : string extends TParamKeys\n    ? TParams\n    : { [param in TParamKeys]: string }\n> {\n  return new RouteRefImpl(\n    config?.params as string[] | undefined,\n    describeParentCallSite(),\n  ) as RouteRef<any>;\n}\n"],"names":[],"mappings":"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"}