import { describeParentCallSite } from './describeParentCallSite.esm.js';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  member.set(obj, value);
  return value;
};
var _id, _params, _creationSite, _name, name_get;
function toInternalRouteRef(resource) {
  const r = resource;
  if (r.$$type !== "@backstage/RouteRef") {
    throw new Error(`Invalid RouteRef, bad type '${r.$$type}'`);
  }
  return r;
}
class RouteRefImpl {
  constructor(params = [], creationSite) {
    this.params = params;
    __privateAdd(this, _name);
    __publicField(this, "$$type", "@backstage/RouteRef");
    __publicField(this, "version", "v1");
    __privateAdd(this, _id, void 0);
    __privateAdd(this, _params, void 0);
    __privateAdd(this, _creationSite, void 0);
    __privateSet(this, _params, params);
    __privateSet(this, _creationSite, creationSite);
  }
  getParams() {
    return __privateGet(this, _params);
  }
  getDescription() {
    if (__privateGet(this, _id)) {
      return __privateGet(this, _id);
    }
    return `created at '${__privateGet(this, _creationSite)}'`;
  }
  setId(id) {
    if (!id) {
      throw new Error(`${__privateGet(this, _name, name_get)} id must be a non-empty string`);
    }
    if (__privateGet(this, _id)) {
      throw new Error(
        `${__privateGet(this, _name, name_get)} was referenced twice as both '${__privateGet(this, _id)}' and '${id}'`
      );
    }
    __privateSet(this, _id, id);
  }
  toString() {
    return `${__privateGet(this, _name, name_get)}{${this.getDescription()}}`;
  }
}
_id = new WeakMap();
_params = new WeakMap();
_creationSite = new WeakMap();
_name = new WeakSet();
name_get = function() {
  return this.$$type.slice("@backstage/".length);
};
function createRouteRef(config) {
  return new RouteRefImpl(
    config == null ? void 0 : config.params,
    describeParentCallSite()
  );
}

export { RouteRefImpl, createRouteRef, toInternalRouteRef };
//# sourceMappingURL=RouteRef.esm.js.map
