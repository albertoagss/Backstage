import React, { Component } from 'react';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class ErrorBoundary extends Component {
  constructor() {
    super(...arguments);
    __publicField(this, "state", { error: void 0 });
    __publicField(this, "handleErrorReset", () => {
      this.setState({ error: void 0 });
    });
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  render() {
    const { error } = this.state;
    const { plugin, children, Fallback } = this.props;
    if (error) {
      return /* @__PURE__ */ React.createElement(
        Fallback,
        {
          plugin,
          error,
          resetError: this.handleErrorReset
        }
      );
    }
    return children;
  }
}

export { ErrorBoundary };
//# sourceMappingURL=ErrorBoundary.esm.js.map
